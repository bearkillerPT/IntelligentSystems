{"ast":null,"code":"var toArr = function toArr(input) {\n  if (!input) {\n    return [];\n  }\n\n  if (typeof input === 'string') {\n    return [input];\n  }\n\n  return input;\n};\n\nvar addImplied = function addImplied(tags, already) {\n  Object.keys(tags).forEach(function (k) {\n    // support deprecated fmts\n    if (tags[k].isA) {\n      tags[k].is = tags[k].isA;\n    }\n\n    if (tags[k].notA) {\n      tags[k].not = tags[k].notA;\n    } // add any implicit 'is' tags\n\n\n    if (tags[k].is && typeof tags[k].is === 'string') {\n      if (!already.hasOwnProperty(tags[k].is) && !tags.hasOwnProperty(tags[k].is)) {\n        tags[tags[k].is] = {};\n      }\n    } // add any implicit 'not' tags\n\n\n    if (tags[k].not && typeof tags[k].not === 'string' && !tags.hasOwnProperty(tags[k].not)) {\n      if (!already.hasOwnProperty(tags[k].not) && !tags.hasOwnProperty(tags[k].not)) {\n        tags[tags[k].not] = {};\n      }\n    }\n  });\n  return tags;\n};\n\nvar validate = function validate(tags, already) {\n  tags = addImplied(tags, already); // property validation\n\n  Object.keys(tags).forEach(function (k) {\n    tags[k].children = toArr(tags[k].children);\n    tags[k].not = toArr(tags[k].not);\n  }); // not links are bi-directional\n  // add any incoming not tags\n\n  Object.keys(tags).forEach(function (k) {\n    var nots = tags[k].not || [];\n    nots.forEach(function (no) {\n      if (tags[no] && tags[no].not) {\n        tags[no].not.push(k);\n      }\n    });\n  });\n  return tags;\n};\n\nexport default validate;","map":null,"metadata":{},"sourceType":"module"}