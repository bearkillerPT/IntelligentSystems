{"ast":null,"code":"import { greedyTo } from './logic/greedy.js';\nimport { getGroup } from '../_lib.js'; //support 'unspecific greedy' .* properly\n// its logic is 'greedy until', where it's looking for the next token\n// '.+ foo' means we check for 'foo', indefinetly\n\nvar doAstrix = function doAstrix(state) {\n  var regs = state.regs;\n  var reg = regs[state.r];\n  var skipto = greedyTo(state, regs[state.r + 1]); //maybe we couldn't find it\n\n  if (skipto === null || skipto === 0) {\n    return null;\n  } // ensure it's long enough\n\n\n  if (reg.min !== undefined && skipto - state.t < reg.min) {\n    return null;\n  } // reduce it back, if it's too long\n\n\n  if (reg.max !== undefined && skipto - state.t > reg.max) {\n    state.t = state.t + reg.max;\n    return true;\n  } // set the group result\n\n\n  if (state.hasGroup === true) {\n    var g = getGroup(state, state.t);\n    g.length = skipto - state.t;\n  }\n\n  state.t = skipto; // log(`âœ“ |greedy|`)\n\n  return true;\n};\n\nexport default doAstrix;","map":null,"metadata":{},"sourceType":"module"}