{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport find from '../find.js';\nimport toJSON from './toJSON.js';\nimport parseVerb from './parse/index.js';\nimport _toInfinitive from './conjugate/toInfinitive.js';\nimport toPast from './conjugate/toPast.js';\nimport toPresent from './conjugate/toPresent.js';\nimport toFuture from './conjugate/toFuture.js';\nimport _toGerund from './conjugate/toGerund.js';\nimport getSubject from './parse/getSubject.js';\nimport getGrammar from './parse/grammar/index.js';\nimport _toNegative from './conjugate/toNegative.js'; // import debug from './debug.js'\n// return the nth elem of a doc\n\nexport var getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n};\n\nvar api = function api(View) {\n  var Verbs = /*#__PURE__*/function (_View) {\n    _inherits(Verbs, _View);\n\n    function Verbs(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Verbs);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Verbs).call(this, document, pointer, groups));\n      _this.viewType = 'Verbs';\n      return _this;\n    }\n\n    _createClass(Verbs, [{\n      key: \"parse\",\n      value: function parse(n) {\n        return getNth(this, n).map(parseVerb);\n      }\n    }, {\n      key: \"json\",\n      value: function json(opts, n) {\n        var m = getNth(this, n);\n        var arr = m.map(function (vb) {\n          var json = vb.toView().json(opts)[0] || {};\n          json.verb = toJSON(vb);\n          return json;\n        }, []);\n        return arr;\n      }\n    }, {\n      key: \"subjects\",\n      value: function subjects(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          return getSubject(vb, parsed).subject;\n        });\n      }\n    }, {\n      key: \"adverbs\",\n      value: function adverbs(n) {\n        return getNth(this, n).map(function (vb) {\n          return vb.match('#Adverb');\n        });\n      }\n    }, {\n      key: \"isSingular\",\n      value: function isSingular(n) {\n        return getNth(this, n).filter(function (vb) {\n          return getSubject(vb).plural !== true;\n        });\n      }\n    }, {\n      key: \"isPlural\",\n      value: function isPlural(n) {\n        return getNth(this, n).filter(function (vb) {\n          return getSubject(vb).plural === true;\n        });\n      }\n    }, {\n      key: \"isImperative\",\n      value: function isImperative(n) {\n        return getNth(this, n).filter(function (vb) {\n          return vb.has('#Imperative');\n        });\n      }\n    }, {\n      key: \"toInfinitive\",\n      value: function toInfinitive(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return _toInfinitive(vb, parsed, info.form);\n        });\n      }\n    }, {\n      key: \"toPresentTense\",\n      value: function toPresentTense(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return toPresent(vb, parsed, info.form);\n        });\n      }\n    }, {\n      key: \"toPastTense\",\n      value: function toPastTense(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return toPast(vb, parsed, info.form);\n        });\n      }\n    }, {\n      key: \"toFutureTense\",\n      value: function toFutureTense(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return toFuture(vb, parsed, info.form);\n        });\n      }\n    }, {\n      key: \"toGerund\",\n      value: function toGerund(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return _toGerund(vb, parsed, info.form);\n        });\n      }\n    }, {\n      key: \"conjugate\",\n      value: function conjugate(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed); // allow imperatives like 'go!' to be conjugated here (only)\n\n          if (info.form === 'imperative') {\n            info.form = 'simple-present';\n          }\n\n          return {\n            Infinitive: _toInfinitive(vb.clone(), parsed, info.form).text('normal'),\n            PastTense: toPast(vb.clone(), parsed, info.form).text('normal'),\n            PresentTense: toPresent(vb.clone(), parsed, info.form).text('normal'),\n            FutureTense: toFuture(vb.clone(), parsed, info.form).text('normal')\n          };\n        }, []);\n      }\n      /** return only verbs with 'not'*/\n\n    }, {\n      key: \"isNegative\",\n      value: function isNegative() {\n        return this.if('#Negative');\n      }\n      /**  return only verbs without 'not'*/\n\n    }, {\n      key: \"isPositive\",\n      value: function isPositive() {\n        return this.ifNo('#Negative');\n      }\n      /** remove 'not' from these verbs */\n\n    }, {\n      key: \"toPositive\",\n      value: function toPositive() {\n        var m = this.match('do not #Verb');\n\n        if (m.found) {\n          m.remove('do not');\n        }\n\n        return this.remove('#Negative');\n      }\n    }, {\n      key: \"toNegative\",\n      value: function toNegative(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parseVerb(vb);\n          var info = getGrammar(vb, parsed);\n          return _toNegative(vb, parsed, info.form);\n        });\n      } // overloaded - keep Verb class\n\n    }, {\n      key: \"update\",\n      value: function update(pointer) {\n        var m = new Verbs(this.document, pointer);\n        m._cache = this._cache; // share this full thing\n\n        return m;\n      }\n    }]);\n\n    return Verbs;\n  }(View);\n\n  Verbs.prototype.toPast = Verbs.prototype.toPastTense;\n  Verbs.prototype.toPresent = Verbs.prototype.toPresentTense;\n  Verbs.prototype.toFuture = Verbs.prototype.toFutureTense;\n\n  View.prototype.verbs = function (n) {\n    var vb = find(this);\n    vb = getNth(vb, n);\n    return new Verbs(this.document, vb.pointer);\n  };\n};\n\nexport default api;","map":null,"metadata":{},"sourceType":"module"}