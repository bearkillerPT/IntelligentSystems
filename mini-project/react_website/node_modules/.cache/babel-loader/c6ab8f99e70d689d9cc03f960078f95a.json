{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport find from './find.js';\nimport _parse from './parse/index.js';\nimport format from './format/index.js'; // return the nth elem of a doc\n\nexport var getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n};\n\nvar addMethod = function addMethod(View) {\n  /**   */\n  var Numbers = /*#__PURE__*/function (_View) {\n    _inherits(Numbers, _View);\n\n    function Numbers(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Numbers);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Numbers).call(this, document, pointer, groups));\n      _this.viewType = 'Numbers';\n      return _this;\n    }\n\n    _createClass(Numbers, [{\n      key: \"parse\",\n      value: function parse(n) {\n        return getNth(this, n).map(_parse);\n      }\n    }, {\n      key: \"get\",\n      value: function get(n) {\n        return getNth(this, n).map(_parse).map(function (o) {\n          return o.num;\n        });\n      }\n    }, {\n      key: \"json\",\n      value: function json(n) {\n        var doc = getNth(this, n);\n        return doc.map(function (p) {\n          var json = p.toView().json(n)[0];\n\n          var parsed = _parse(p);\n\n          json.number = {\n            prefix: parsed.prefix,\n            num: parsed.num,\n            suffix: parsed.suffix,\n            hasComma: parsed.hasComma\n          };\n          return json;\n        }, []);\n      }\n      /** any known measurement unit, for the number */\n\n    }, {\n      key: \"units\",\n      value: function units() {\n        return this.growRight('#Unit').match('#Unit$');\n      }\n      /** return only ordinal numbers */\n\n    }, {\n      key: \"isOrdinal\",\n      value: function isOrdinal() {\n        return this.if('#Ordinal');\n      }\n      /** return only cardinal numbers*/\n\n    }, {\n      key: \"isCardinal\",\n      value: function isCardinal() {\n        return this.if('#Cardinal');\n      }\n      /** convert to numeric form like '8' or '8th' */\n\n    }, {\n      key: \"toNumber\",\n      value: function toNumber() {\n        var m = this.if('#TextValue');\n        m.forEach(function (val) {\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return;\n          }\n\n          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n          var str = format(obj, fmt);\n          val.replaceWith(str, {\n            tags: true\n          });\n          val.tag('NumericValue');\n        });\n        return this;\n      }\n      /** add commas, or nicer formatting for numbers */\n\n    }, {\n      key: \"toLocaleString\",\n      value: function toLocaleString() {\n        var m = this;\n        m.forEach(function (val) {\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return;\n          }\n\n          var num = obj.num.toLocaleString(); // support ordinal ending, too\n\n          if (val.has('#Ordinal')) {\n            var str = format(obj, 'Ordinal');\n            var end = str.match(/[a-z]+$/);\n\n            if (end) {\n              num += end[0] || '';\n            }\n          }\n\n          val.replaceWith(num, {\n            tags: true\n          });\n        });\n        return this;\n      }\n      /** convert to numeric form like 'eight' or 'eighth' */\n\n    }, {\n      key: \"toText\",\n      value: function toText() {\n        var m = this;\n        var res = m.map(function (val) {\n          if (val.has('#TextValue')) {\n            return val;\n          }\n\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return val;\n          }\n\n          var fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n          var str = format(obj, fmt);\n          val.replaceWith(str, {\n            tags: true\n          });\n          val.tag('TextValue');\n          return val;\n        });\n        return new Numbers(res.document, res.pointer);\n      }\n      /** convert ordinal to cardinal form, like 'eight', or '8' */\n\n    }, {\n      key: \"toCardinal\",\n      value: function toCardinal() {\n        var m = this;\n        var res = m.map(function (val) {\n          if (!val.has('#Ordinal')) {\n            return val;\n          }\n\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return val;\n          }\n\n          var fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal';\n          var str = format(obj, fmt);\n          val.replaceWith(str, {\n            tags: true\n          });\n          val.tag('Cardinal');\n          return val;\n        });\n        return new Numbers(res.document, res.pointer);\n      }\n      /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n\n    }, {\n      key: \"toOrdinal\",\n      value: function toOrdinal() {\n        var m = this;\n        var res = m.map(function (val) {\n          if (val.has('#Ordinal')) {\n            return val;\n          }\n\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return val;\n          }\n\n          var fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal';\n          var str = format(obj, fmt);\n          val.replaceWith(str, {\n            tags: true\n          });\n          val.tag('Ordinal');\n          return val;\n        });\n        return new Numbers(res.document, res.pointer);\n      }\n      /** return only numbers that are == n */\n\n    }, {\n      key: \"isEqual\",\n      value: function isEqual(n) {\n        return this.filter(function (val) {\n          var num = _parse(val).num;\n\n          return num === n;\n        });\n      }\n      /** return only numbers that are > n*/\n\n    }, {\n      key: \"greaterThan\",\n      value: function greaterThan(n) {\n        return this.filter(function (val) {\n          var num = _parse(val).num;\n\n          return num > n;\n        });\n      }\n      /** return only numbers that are < n*/\n\n    }, {\n      key: \"lessThan\",\n      value: function lessThan(n) {\n        return this.filter(function (val) {\n          var num = _parse(val).num;\n\n          return num < n;\n        });\n      }\n      /** return only numbers > min and < max */\n\n    }, {\n      key: \"between\",\n      value: function between(min, max) {\n        return this.filter(function (val) {\n          var num = _parse(val).num;\n\n          return num > min && num < max;\n        });\n      }\n      /** set these number to n */\n\n    }, {\n      key: \"set\",\n      value: function set(n) {\n        if (n === undefined) {\n          return this; // don't bother\n        }\n\n        if (typeof n === 'string') {\n          n = _parse(n).num;\n        }\n\n        var m = this;\n        var res = m.map(function (val) {\n          var obj = _parse(val);\n\n          obj.num = n;\n\n          if (obj.num === null) {\n            return val;\n          }\n\n          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n\n          if (val.has('#TextValue')) {\n            fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n          }\n\n          var str = format(obj, fmt); // add commas to number\n\n          if (obj.hasComma && fmt === 'Cardinal') {\n            str = Number(str).toLocaleString();\n          }\n\n          val = val.not('#Currency');\n          val.replaceWith(str, {\n            tags: true\n          }); // handle plural/singular unit\n          // agreeUnits(agree, val, obj)\n\n          return val;\n        });\n        return new Numbers(res.document, res.pointer);\n      }\n    }, {\n      key: \"add\",\n      value: function add(n) {\n        if (!n) {\n          return this; // don't bother\n        }\n\n        if (typeof n === 'string') {\n          n = _parse(n).num;\n        }\n\n        var m = this;\n        var res = m.map(function (val) {\n          var obj = _parse(val);\n\n          if (obj.num === null) {\n            return val;\n          }\n\n          obj.num += n;\n          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';\n\n          if (obj.isText) {\n            fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';\n          }\n\n          var str = format(obj, fmt);\n          val.replaceWith(str, {\n            tags: true\n          }); // handle plural/singular unit\n          // agreeUnits(agree, val, obj)\n\n          return val;\n        });\n        return new Numbers(res.document, res.pointer);\n      }\n      /** decrease each number by n*/\n\n    }, {\n      key: \"subtract\",\n      value: function subtract(n, agree) {\n        return this.add(n * -1, agree);\n      }\n      /** increase each number by 1 */\n\n    }, {\n      key: \"increment\",\n      value: function increment(agree) {\n        return this.add(1, agree);\n      }\n      /** decrease each number by 1 */\n\n    }, {\n      key: \"decrement\",\n      value: function decrement(agree) {\n        return this.add(-1, agree);\n      } // overloaded - keep Numbers class\n\n    }, {\n      key: \"update\",\n      value: function update(pointer) {\n        var m = new Numbers(this.document, pointer);\n        m._cache = this._cache; // share this full thing\n\n        return m;\n      }\n    }]);\n\n    return Numbers;\n  }(View); // aliases\n\n\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString;\n  Numbers.prototype.isBetween = Numbers.prototype.between;\n  Numbers.prototype.minus = Numbers.prototype.subtract;\n  Numbers.prototype.plus = Numbers.prototype.add;\n  Numbers.prototype.equals = Numbers.prototype.isEqual;\n\n  View.prototype.numbers = function (n) {\n    var m = find(this);\n    m = getNth(m, n);\n    return new Numbers(this.document, m.pointer);\n  };\n\n  View.prototype.percentages = function (n) {\n    var m = find(this);\n    m = m.filter(function (v) {\n      return v.has('#Percent') || v.after('^percent');\n    });\n    m = getNth(m, n);\n    return new Numbers(this.document, m.pointer);\n  };\n\n  View.prototype.money = function (n) {\n    var m = find(this);\n    m = m.filter(function (v) {\n      return v.has('#Money') || v.after('^#Currency');\n    });\n    m = getNth(m, n);\n    return new Numbers(this.document, m.pointer);\n  }; // alias\n\n\n  View.prototype.values = View.prototype.numbers;\n};\n\nexport default addMethod;","map":null,"metadata":{},"sourceType":"module"}