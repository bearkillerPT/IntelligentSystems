{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n// return the nth elem of a doc\nexport var getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n}; // guard against superlative+comparative forms\n\nvar toRoot = function toRoot(adj) {\n  var _adj$methods$two$tran = adj.methods.two.transform,\n      adjFromComparative = _adj$methods$two$tran.adjFromComparative,\n      adjFromSuperlative = _adj$methods$two$tran.adjFromSuperlative;\n  var str = adj.text('normal');\n\n  if (adj.has('#Comparative')) {\n    return adjFromComparative(str, adj.model);\n  }\n\n  if (adj.has('#Superlative')) {\n    return adjFromSuperlative(str, adj.model);\n  }\n\n  return str;\n};\n\nvar api = function api(View) {\n  var Adjectives = /*#__PURE__*/function (_View) {\n    _inherits(Adjectives, _View);\n\n    function Adjectives(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Adjectives);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Adjectives).call(this, document, pointer, groups));\n      _this.viewType = 'Adjectives';\n      return _this;\n    }\n\n    _createClass(Adjectives, [{\n      key: \"json\",\n      value: function json() {\n        var _this2 = this;\n\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _this$methods$two$tra = this.methods.two.transform,\n            adjToAdverb = _this$methods$two$tra.adjToAdverb,\n            adjToNoun = _this$methods$two$tra.adjToNoun,\n            adjToSuperlative = _this$methods$two$tra.adjToSuperlative,\n            adjToComparative = _this$methods$two$tra.adjToComparative;\n        opts.normal = true;\n        return this.map(function (m) {\n          var json = m.toView().json(opts)[0] || {};\n          var str = toRoot(m);\n          json.adjective = {\n            adverb: adjToAdverb(str),\n            noun: adjToNoun(str),\n            superlative: adjToSuperlative(str, _this2.model),\n            comparative: adjToComparative(str, _this2.model)\n          };\n          return json;\n        }, []);\n      }\n    }, {\n      key: \"adverbs\",\n      value: function adverbs() {\n        return this.before('#Adverb+$').concat(this.after('^#Adverb+'));\n      }\n    }, {\n      key: \"toComparative\",\n      value: function toComparative(n) {\n        var _this3 = this;\n\n        var adjToComparative = this.methods.two.transform.adjToComparative;\n        return getNth(this, n).map(function (adj) {\n          var root = toRoot(adj);\n          var str = adjToComparative(root, _this3.model);\n          return adj.replaceWith(str);\n        });\n      }\n    }, {\n      key: \"toSuperlative\",\n      value: function toSuperlative(n) {\n        var _this4 = this;\n\n        var adjToSuperlative = this.methods.two.transform.adjToSuperlative;\n        return getNth(this, n).map(function (adj) {\n          var root = toRoot(adj);\n          var str = adjToSuperlative(root, _this4.model);\n          return adj.replaceWith(str);\n        });\n      }\n    }, {\n      key: \"toAdverb\",\n      value: function toAdverb(n) {\n        var _this5 = this;\n\n        var adjToAdverb = this.methods.two.transform.adjToAdverb;\n        return getNth(this, n).map(function (adj) {\n          var root = toRoot(adj);\n          var str = adjToAdverb(root, _this5.model);\n          return adj.replaceWith(str);\n        });\n      }\n    }, {\n      key: \"toNoun\",\n      value: function toNoun(n) {\n        var _this6 = this;\n\n        var adjToNoun = this.methods.two.transform.adjToNoun;\n        return getNth(this, n).map(function (adj) {\n          var root = toRoot(adj);\n          var str = adjToNoun(root, _this6.model);\n          return adj.replaceWith(str);\n        });\n      }\n    }]);\n\n    return Adjectives;\n  }(View);\n\n  View.prototype.adjectives = function (n) {\n    var m = this.match('#Adjective');\n    m = getNth(m, n);\n    return new Adjectives(m.document, m.pointer);\n  };\n\n  View.prototype.superlatives = function (n) {\n    var m = this.match('#Superlative');\n    m = getNth(m, n);\n    return new Adjectives(m.document, m.pointer);\n  };\n\n  View.prototype.comparatives = function (n) {\n    var m = this.match('#Comparative');\n    m = getNth(m, n);\n    return new Adjectives(m.document, m.pointer);\n  };\n};\n\nexport default api;","map":null,"metadata":{},"sourceType":"module"}