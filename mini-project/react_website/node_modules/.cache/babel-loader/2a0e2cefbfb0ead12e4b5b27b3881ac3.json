{"ast":null,"code":"var isArray = function isArray(input) {\n  return Object.prototype.toString.call(input) === '[object Array]';\n};\n\nvar fns = {\n  /** add metadata to term objects */\n  compute: function compute(input) {\n    var _this = this;\n\n    var world = this.world;\n    var compute = world.compute; // do one method\n\n    if (typeof input === 'string' && compute.hasOwnProperty(input)) {\n      compute[input](this);\n    } // allow a list of methods\n    else if (isArray(input)) {\n      input.forEach(function (name) {\n        if (world.compute.hasOwnProperty(name)) {\n          compute[name](_this);\n        } else {\n          console.warn('no compute:', input); // eslint-disable-line\n        }\n      });\n    } // allow a custom compute function\n    else if (typeof input === 'function') {\n      input(this);\n    } else {\n      console.warn('no compute:', input); // eslint-disable-line\n    }\n\n    return this;\n  }\n};\nexport default fns;","map":null,"metadata":{},"sourceType":"module"}