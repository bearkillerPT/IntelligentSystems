{"ast":null,"code":"import { noop, getTense, wasWere, noWill } from '../lib.js';\nvar keep = {\n  tags: true\n};\nvar fns = {\n  noAux: function noAux(vb, parsed) {\n    if (parsed.auxiliary.found) {\n      vb = vb.remove(parsed.auxiliary);\n    }\n\n    return vb;\n  },\n  // walk->walked\n  simple: function simple(vb, parsed) {\n    var _vb$methods$two$trans = vb.methods.two.transform,\n        verbConjugate = _vb$methods$two$trans.verbConjugate,\n        verbToInfinitive = _vb$methods$two$trans.verbToInfinitive;\n    var root = parsed.root; // 'i may'\n\n    if (root.has('#Modal')) {\n      return vb;\n    }\n\n    var str = root.text({\n      keepPunct: false\n    });\n    str = verbToInfinitive(str, vb.model, getTense(root));\n    var all = verbConjugate(str, vb.model); // 'driven' || 'drove'\n\n    str = all.PastTense; // all.Participle || all.PastTense\n    // but skip the 'is' participle..\n\n    str = str === 'been' ? 'was' : str;\n\n    if (str === 'was') {\n      str = wasWere(vb, parsed);\n    }\n\n    if (str) {\n      vb.replace(root, str, keep);\n    }\n\n    return vb;\n  },\n  both: function both(vb, parsed) {\n    // 'he did not walk'\n    if (parsed.negative.found) {\n      vb.replace('will', 'did');\n      return vb;\n    } // 'he walked'\n\n\n    vb = fns.simple(vb, parsed);\n    vb = fns.noAux(vb, parsed);\n    return vb;\n  },\n  hasHad: function hasHad(vb) {\n    vb.replace('has', 'had', keep);\n    return vb;\n  },\n  // some verbs have this weird past-tense form\n  // drive -> driven, (!drove)\n  hasParticiple: function hasParticiple(vb, parsed) {\n    var _vb$methods$two$trans2 = vb.methods.two.transform,\n        verbConjugate = _vb$methods$two$trans2.verbConjugate,\n        verbToInfinitive = _vb$methods$two$trans2.verbToInfinitive;\n    var root = parsed.root;\n    var str = root.text('normal');\n    str = verbToInfinitive(str, vb.model, getTense(root));\n    return verbConjugate(str, vb.model).Participle;\n  }\n};\nvar forms = {\n  // walk -> walked\n  'infinitive': fns.simple,\n  // he walks -> he walked\n  'simple-present': fns.simple,\n  // he walked\n  'simple-past': noop,\n  // he will walk -> he walked\n  'simple-future': fns.both,\n  // he is walking\n  'present-progressive': function presentProgressive(vb) {\n    vb.replace('are', 'were', keep);\n    vb.replace('(is|are|am)', 'was', keep);\n    return vb;\n  },\n  // he was walking\n  'past-progressive': noop,\n  // he will be walking\n  'future-progressive': function futureProgressive(vb, parsed) {\n    vb.match(parsed.root).insertBefore('was');\n    vb.remove('(will|be)');\n    return vb;\n  },\n  // has walked -> had walked (?)\n  'present-perfect': fns.hasHad,\n  // had walked\n  'past-perfect': noop,\n  // will have walked -> had walked\n  'future-perfect': function futurePerfect(vb, parsed) {\n    vb.match(parsed.root).insertBefore('had');\n\n    if (vb.has('will')) {\n      vb = noWill(vb);\n    }\n\n    vb.remove('have');\n    return vb;\n  },\n  // has been walking -> had been\n  'present-perfect-progressive': fns.hasHad,\n  // had been walking\n  'past-perfect-progressive': noop,\n  // will have been -> had\n  'future-perfect-progressive': function futurePerfectProgressive(vb) {\n    vb.remove('will');\n    vb.replace('have', 'had', keep);\n    return vb;\n  },\n  // got walked\n  'passive-past': function passivePast(vb) {\n    // 'have been walked' -> 'had been walked'\n    vb.replace('have', 'had', keep);\n    return vb;\n  },\n  // is being walked  -> 'was being walked'\n  'passive-present': function passivePresent(vb) {\n    vb.replace('(is|are)', 'was', keep);\n    return vb;\n  },\n  // will be walked -> had been walked\n  'passive-future': function passiveFuture(vb, parsed) {\n    if (parsed.auxiliary.has('will be')) {\n      vb.match(parsed.root).insertBefore('had been');\n      vb.remove('(will|be)');\n    } // will have been walked -> had been walked\n\n\n    if (parsed.auxiliary.has('will have been')) {\n      vb.replace('have', 'had', keep);\n      vb.remove('will');\n    }\n\n    return vb;\n  },\n  // would be walked -> 'would have been walked'\n  'present-conditional': function presentConditional(vb) {\n    vb.replace('be', 'have been');\n    return vb;\n  },\n  // would have been walked\n  'past-conditional': noop,\n  // is going to drink -> was going to drink\n  'auxiliary-future': function auxiliaryFuture(vb) {\n    vb.replace('(is|are|am)', 'was', keep);\n    return vb;\n  },\n  // used to walk\n  'auxiliary-past': noop,\n  // we do walk -> we did walk\n  'auxiliary-present': function auxiliaryPresent(vb) {\n    vb.replace('(do|does)', 'did', keep);\n    return vb;\n  },\n  // must walk -> 'must have walked'\n  'modal-infinitive': function modalInfinitive(vb, parsed) {\n    // this modal has a clear tense\n    if (vb.has('can')) {\n      // can drive -> could drive\n      vb.replace('can', 'could', keep);\n    } else {\n      // otherwise, \n      //  walk -> have walked\n      //  drive -> have driven\n      fns.simple(vb, parsed);\n      vb.match('#Modal').insertAfter('have').tag('Auxiliary');\n    }\n\n    return vb;\n  },\n  // must have walked\n  'modal-past': noop,\n  // wanted to walk\n  'want-infinitive': function wantInfinitive(vb) {\n    vb.replace('(want|wants)', 'wanted', keep);\n    vb.remove('will');\n    return vb;\n  },\n  // started looking\n  'gerund-phrase': function gerundPhrase(vb, parsed) {\n    parsed.root = parsed.root.not('#Gerund$');\n    fns.simple(vb, parsed);\n    noWill(vb);\n    return vb;\n  }\n};\n\nvar toPast = function toPast(vb, parsed, form) {\n  // console.log(form)\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed);\n    vb.fullSentence().compute(['lexicon', 'preTagger', 'postTagger', 'chunks']);\n    return vb;\n  } // do nothing i guess?\n\n\n  return vb;\n};\n\nexport default toPast;","map":null,"metadata":{},"sourceType":"module"}