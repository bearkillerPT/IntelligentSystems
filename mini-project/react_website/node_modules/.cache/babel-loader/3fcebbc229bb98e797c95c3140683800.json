{"ast":null,"code":"import fastTag from '../_fastTag.js'; //sweep-through all suffixes\n\nvar suffixLoop = function suffixLoop() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var suffixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var len = str.length;\n  var max = 7;\n\n  if (len <= max) {\n    max = len - 1;\n  }\n\n  for (var i = max; i > 1; i -= 1) {\n    var suffix = str.substring(len - i, len);\n\n    if (suffixes[suffix.length].hasOwnProperty(suffix) === true) {\n      // console.log(suffix)\n      var tag = suffixes[suffix.length][suffix];\n      return tag;\n    }\n  }\n\n  return null;\n}; // decide tag from the ending of the word\n\n\nvar tagBySuffix = function tagBySuffix(terms, i, model) {\n  var term = terms[i];\n\n  if (term.tags.size === 0) {\n    var tag = suffixLoop(term.normal, model.two.suffixPatterns);\n\n    if (tag !== null) {\n      fastTag(term, tag, '2-suffix');\n      term.confidence = 0.7;\n      return true;\n    } // try implicit form of word, too\n\n\n    if (term.implicit) {\n      tag = suffixLoop(term.implicit, model.two.suffixPatterns);\n\n      if (tag !== null) {\n        fastTag(term, tag, '2-implicit-suffix');\n        term.confidence = 0.7;\n        return true;\n      }\n    } // Infinitive suffix + 's' can be PresentTense\n    // if (term.normal[term.normal.length - 1] === 's') {\n    //   let str = term.normal.replace(/s$/, '')\n    //   if (suffixLoop(str, model.two.suffixPatterns) === 'Infinitive') {\n    //     console.log(str)\n    //     fastTag(term, 'PresentTense', '2-implied-present')\n    //     term.confidence = 0.5\n    //     return true\n    //   }\n    // }\n\n  }\n\n  return null;\n};\n\nexport default tagBySuffix;","map":null,"metadata":{},"sourceType":"module"}