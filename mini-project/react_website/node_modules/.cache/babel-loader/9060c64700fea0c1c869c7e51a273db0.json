{"ast":null,"code":"import validate from '../validate/index.js';\nimport { findRules, updateRules } from './01-generate/index.js';\nimport { trimPairs, trimRules } from './02-trim/index.js';\n\nvar learn = function learn(pairs) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  pairs = validate(pairs, opts);\n  var rules = findRules(pairs);\n  var pairsLeft = pairs;\n  var pairsDone = [];\n  var chosen = []; // pick our top rule\n\n  while (pairsLeft.length > 0 && rules.length > 0) {\n    var rule = rules.pop();\n    chosen.push([rule.from, rule.to]); // remove now-covered pairs\n\n    var res = trimPairs(pairsLeft, rule);\n    pairsLeft = res.remain;\n    pairsDone = pairsDone.concat(res.done); // remove now-unsafe rules\n\n    rules = trimRules(rules, pairsDone); // re-rank our rules\n\n    rules = updateRules(rules, pairsLeft, opts); // logging\n\n    if (opts.debug) {\n      console.log(\"\\n\".concat(rule.from, \" -> \").concat(rule.to || \"''\"));\n      console.log(\"    \\x1B[32m +\".concat(res.done.length.toLocaleString(), \" pairs\\x1B[0m\"));\n      console.log('   ', pairsLeft.length, 'remaining');\n      console.log('   ', rules.length, 'rules left');\n    }\n  } // turn em upside-down\n\n\n  chosen = chosen.reverse(); // remaining pairs are exceptions\n\n  var exceptions = pairsLeft.reduce(function (h, a) {\n    h[a[0]] = a[1];\n    return h;\n  }, {});\n  return {\n    rules: chosen,\n    exceptions: exceptions\n  };\n};\n\nexport default learn;","map":null,"metadata":{},"sourceType":"module"}