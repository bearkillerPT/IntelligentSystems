{"ast":null,"code":"var hasContraction = /'/; //look for a past-tense verb\n// const hasPastTense = (terms, i) => {\n//   let after = terms.slice(i + 1, i + 3)\n//   return after.some(t => t.tags.has('PastTense'))\n// }\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\n\nvar alwaysDid = new Set(['what', 'how', 'when', 'where', 'why']); // after-words\n\nvar useWould = new Set(['be', 'go', 'start', 'think', 'need']);\nvar useHad = new Set(['been', 'gone']); // they'd gone\n// they'd go\n// he'd been\n//    he had been\n//    he would been\n\nvar _apostropheD = function _apostropheD(terms, i) {\n  var before = terms[i].normal.split(hasContraction)[0]; // what'd, how'd\n\n  if (alwaysDid.has(before)) {\n    return [before, 'did'];\n  }\n\n  if (terms[i + 1]) {\n    // they'd gone\n    if (useHad.has(terms[i + 1].normal)) {\n      return [before, 'had'];\n    } // they'd go\n\n\n    if (useWould.has(terms[i + 1].normal)) {\n      return [before, 'would'];\n    }\n  }\n\n  return null; //   if (hasPastTense(terms, i) === true) {\n  //     return [before, 'had']\n  //   }\n  //   // had/would/did\n  //   return [before, 'would']\n};\n\nexport default _apostropheD;","map":null,"metadata":{},"sourceType":"module"}