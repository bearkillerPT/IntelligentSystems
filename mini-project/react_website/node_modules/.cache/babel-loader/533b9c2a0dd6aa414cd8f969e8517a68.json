{"ast":null,"code":"import { doDoes, toInf } from '../lib.js';\nvar keep = {\n  tags: true\n}; // do/does not walk \n\nvar doesNot = function doesNot(vb, parsed) {\n  var does = doDoes(vb, parsed);\n  vb.prepend(does + ' not');\n  return vb;\n};\n\nvar isWas = function isWas(vb) {\n  // not be\n  var m = vb.match('be');\n\n  if (m.found) {\n    m.prepend('not');\n    return vb;\n  } // will not\n\n\n  m = vb.match('(is|was|am|are|will|were)');\n\n  if (m.found) {\n    m.append('not');\n    return vb;\n  }\n\n  return vb;\n};\n\nvar hasCopula = function hasCopula(vb) {\n  return vb.has('(is|was|am|are|will|were|be)');\n}; //vaguely, turn 'he is cool' into 'he is not cool'\n\n\nvar forms = {\n  // he walks' -> 'he does not walk'\n  'simple-present': function simplePresent(vb, parsed) {\n    // is/was\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed);\n    } // he walk\n\n\n    vb = toInf(vb, parsed); // does not \n\n    vb = doesNot(vb, parsed);\n    return vb;\n  },\n  // 'he walked' -> 'he did not walk'\n  'simple-past': function simplePast(vb, parsed) {\n    // is/was\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed);\n    } // he walk\n\n\n    vb = toInf(vb, parsed); // vb.debug()\n    // did not walk\n\n    vb.prepend('did not');\n    return vb;\n  },\n  // walk! -> 'do not walk'\n  'imperative': function imperative(vb) {\n    vb.prepend('do not');\n    return vb;\n  },\n  // walk -> does not walk\n  'infinitive': function infinitive(vb, parsed) {\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed);\n    }\n\n    return doesNot(vb, parsed);\n  },\n  'passive-past': function passivePast(vb) {\n    // got walked -> did not get walked\n    if (vb.has('got')) {\n      vb.replace('got', 'get', keep);\n      vb.prepend('did not');\n      return vb;\n    } // was walked, were walked\n    // was being walked\n    // had been walked, have been eaten\n\n\n    var m = vb.match('(was|were|had|have)');\n\n    if (m.found) {\n      m.append('not');\n    }\n\n    return vb;\n  },\n  'auxiliary-past': function auxiliaryPast(vb) {\n    // used to walk\n    if (vb.has('used')) {\n      vb.prepend('did not');\n      return vb;\n    } // he did walk\n\n\n    var m = vb.match('(did|does|do)');\n\n    if (m.found) {\n      m.append('not');\n    }\n\n    return vb;\n  },\n  // wants to walk\n  'want-infinitive': function wantInfinitive(vb, parsed) {\n    // does not \n    vb = doesNot(vb, parsed); // want\n\n    vb = vb.replace('wants', 'want', keep);\n    return vb;\n  }\n};\n\nvar toNegative = function toNegative(vb, parsed, form) {\n  // console.log(form)\n  if (vb.has('#Negative')) {\n    return vb;\n  }\n\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed);\n    return vb;\n  } // 'not be'\n\n\n  var m = vb.matchOne('be');\n\n  if (m.found) {\n    m.prepend('not');\n    return vb;\n  } // is/was not\n\n\n  if (hasCopula(vb) === true) {\n    return isWas(vb, parsed);\n  } // 'would not'\n\n\n  m = vb.matchOne('(will|had|have|has|did|does|do|#Modal)');\n\n  if (m.found) {\n    m.append('not');\n    return vb;\n  } // do nothing i guess?\n\n\n  return vb;\n};\n\nexport default toNegative;","map":null,"metadata":{},"sourceType":"module"}