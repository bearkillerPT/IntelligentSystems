{"ast":null,"code":"import parseSymbols from './symbols.js';\nimport encoding from '../encoding.js'; // References are either absolute (symbol) or relative (1 - based)\n\nvar indexFromRef = function indexFromRef(trie, ref, index) {\n  var dnode = encoding.fromAlphaCode(ref);\n\n  if (dnode < trie.symCount) {\n    return trie.syms[dnode];\n  }\n\n  return index + dnode + 1 - trie.symCount;\n};\n\nvar toArray = function toArray(trie) {\n  var all = [];\n\n  var crawl = function crawl(index, pref) {\n    var node = trie.nodes[index];\n\n    if (node[0] === '!') {\n      all.push(pref);\n      node = node.slice(1); //ok, we tried. remove it.\n    }\n\n    var matches = node.split(/([A-Z0-9,]+)/g);\n\n    for (var i = 0; i < matches.length; i += 2) {\n      var str = matches[i];\n      var ref = matches[i + 1];\n\n      if (!str) {\n        continue;\n      }\n\n      var have = pref + str; //branch's end\n\n      if (ref === ',' || ref === undefined) {\n        all.push(have);\n        continue;\n      }\n\n      var newIndex = indexFromRef(trie, ref, index);\n      crawl(newIndex, have);\n    }\n  };\n\n  crawl(0, '');\n  return all;\n}; //PackedTrie - Trie traversal of the Trie packed-string representation.\n\n\nvar unpack = function unpack(str) {\n  var trie = {\n    nodes: str.split(';'),\n    syms: [],\n    symCount: 0\n  }; //process symbols, if they have them\n\n  if (str.match(':')) {\n    parseSymbols(trie);\n  }\n\n  return toArray(trie);\n};\n\nexport default unpack;","map":null,"metadata":{},"sourceType":"module"}