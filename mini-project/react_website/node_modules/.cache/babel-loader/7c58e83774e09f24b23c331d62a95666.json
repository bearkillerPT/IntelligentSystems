{"ast":null,"code":"// name any [unnamed] capture-groups with a number\nvar nameGroups = function nameGroups(regs) {\n  var index = 0;\n  var inGroup = null; //'fill in' capture groups between start-end\n\n  for (var i = 0; i < regs.length; i++) {\n    var token = regs[i];\n\n    if (token.groupStart === true) {\n      inGroup = token.group;\n\n      if (inGroup === null) {\n        inGroup = String(index);\n        index += 1;\n      }\n    }\n\n    if (inGroup !== null) {\n      token.group = inGroup;\n    }\n\n    if (token.groupEnd === true) {\n      inGroup = null;\n    }\n  }\n\n  return regs;\n}; // optimize an 'or' lookup, when the (a|b|c) list is simple or multi-word\n\n\nvar doFastOrMode = function doFastOrMode(tokens) {\n  return tokens.map(function (token) {\n    if (token.choices !== undefined) {\n      // make sure it's an OR\n      if (token.operator !== 'or') {\n        return token;\n      }\n\n      if (token.fuzzy === true) {\n        return token;\n      } // are they all straight-up words? then optimize them.\n\n\n      var shouldPack = token.choices.every(function (block) {\n        if (block.length !== 1) {\n          return false;\n        }\n\n        var reg = block[0]; // ~fuzzy~ words need more care\n\n        if (reg.fuzzy === true) {\n          return false;\n        } // ^ and $ get lost in fastOr\n\n\n        if (reg.start || reg.end) {\n          return false;\n        }\n\n        if (reg.word !== undefined && reg.negative !== true && reg.optional !== true && reg.method !== true) {\n          return true; //reg is simple-enough\n        }\n\n        return false;\n      });\n\n      if (shouldPack === true) {\n        token.fastOr = new Set();\n        token.choices.forEach(function (block) {\n          token.fastOr.add(block[0].word);\n        });\n        delete token.choices;\n      }\n    }\n\n    return token;\n  });\n}; // support ~(a|b|c)~\n\n\nvar fuzzyOr = function fuzzyOr(regs) {\n  return regs.map(function (reg) {\n    if (reg.fuzzy && reg.choices) {\n      // pass fuzzy-data to each OR choice\n      reg.choices.forEach(function (r) {\n        if (r.length === 1 && r[0].word) {\n          r[0].fuzzy = true;\n          r[0].min = reg.min;\n        }\n      });\n    }\n\n    return reg;\n  });\n};\n\nvar postProcess = function postProcess(regs) {\n  // ensure all capture groups names are filled between start and end\n  regs = nameGroups(regs); // convert 'choices' format to 'fastOr' format\n\n  regs = doFastOrMode(regs); // support ~(foo|bar)~\n\n  regs = fuzzyOr(regs);\n  return regs;\n};\n\nexport default postProcess;","map":null,"metadata":{},"sourceType":"module"}