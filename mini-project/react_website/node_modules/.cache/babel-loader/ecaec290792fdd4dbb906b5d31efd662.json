{"ast":null,"code":"import { textFromTerms } from './lib/_text.js';\nimport fmts from './_fmts.js';\nimport _hash from './lib/hash.js';\nvar defaults = {\n  text: true,\n  terms: true\n};\nvar opts = {\n  case: 'none',\n  unicode: 'some',\n  form: 'machine',\n  punctuation: 'some'\n};\n\nvar merge = function merge(a, b) {\n  return Object.assign({}, a, b);\n};\n\nvar fns = {\n  text: function text(terms) {\n    return textFromTerms(terms, {\n      keepPunct: true\n    }, false);\n  },\n  normal: function normal(terms) {\n    return textFromTerms(terms, merge(fmts.normal, {\n      keepPunct: true\n    }), false);\n  },\n  implicit: function implicit(terms) {\n    return textFromTerms(terms, merge(fmts.implicit, {\n      keepPunct: true\n    }), false);\n  },\n  machine: function machine(terms) {\n    return textFromTerms(terms, opts, false);\n  },\n  root: function root(terms) {\n    return textFromTerms(terms, merge(opts, {\n      form: 'root'\n    }), false);\n  },\n  hash: function hash(terms) {\n    return _hash(textFromTerms(terms, {\n      keepPunct: true\n    }, false));\n  },\n  offset: function offset(terms) {\n    var len = fns.text(terms).length;\n    return {\n      index: terms[0].offset.index,\n      start: terms[0].offset.start,\n      length: len\n    };\n  },\n  terms: function terms(_terms2) {\n    return _terms2.map(function (t) {\n      var term = Object.assign({}, t);\n      term.tags = Array.from(t.tags);\n      return term;\n    });\n  },\n  confidence: function confidence(_terms, view, i) {\n    return view.eq(i).confidence();\n  },\n  syllables: function syllables(_terms, view, i) {\n    return view.eq(i).syllables();\n  },\n  sentence: function sentence(_terms, view, i) {\n    return view.eq(i).fullSentence().text();\n  },\n  dirty: function dirty(terms) {\n    return terms.some(function (t) {\n      return t.dirty === true;\n    });\n  }\n};\nfns.sentences = fns.sentence;\nfns.clean = fns.normal;\nfns.reduced = fns.root;\n\nvar toJSON = function toJSON(view, option) {\n  option = option || {};\n\n  if (typeof option === 'string') {\n    option = {};\n  }\n\n  option = Object.assign({}, defaults, option); // run any necessary upfront steps\n\n  if (option.offset) {\n    view.compute('offset');\n  }\n\n  return view.docs.map(function (terms, i) {\n    var res = {};\n    Object.keys(option).forEach(function (k) {\n      if (option[k] && fns[k]) {\n        res[k] = fns[k](terms, view, i);\n      }\n    });\n    return res;\n  });\n};\n\nvar methods = {\n  /** return data */\n  json: function json(n) {\n    var res = toJSON(this, n);\n\n    if (typeof n === 'number') {\n      return res[n];\n    }\n\n    return res;\n  }\n};\nmethods.data = methods.json;\nexport default methods;","map":null,"metadata":{},"sourceType":"module"}