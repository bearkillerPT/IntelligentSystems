{"ast":null,"code":"import { noop, isPlural, isAreAm, doDoes, getSubject, toInf, getTense } from '../lib.js';\nvar keep = {\n  tags: true\n}; // walk->walked\n\nvar simple = function simple(vb, parsed) {\n  var _vb$methods$two$trans = vb.methods.two.transform,\n      verbConjugate = _vb$methods$two$trans.verbConjugate,\n      verbToInfinitive = _vb$methods$two$trans.verbToInfinitive;\n  var root = parsed.root;\n  var str = root.text('normal');\n  str = verbToInfinitive(str, vb.model, getTense(root)); // 'i walk' vs 'he walks'\n\n  if (isPlural(vb, parsed) === false) {\n    str = verbConjugate(str, vb.model).PresentTense;\n  } // handle copula\n\n\n  if (root.has('#Copula')) {\n    str = isAreAm(vb, parsed);\n  }\n\n  if (str) {\n    vb = vb.replace(root, str, keep);\n    vb.not('#Particle').tag('PresentTense');\n  } // vb.replace('not ' + str, str + ' not')\n\n\n  return vb;\n};\n\nvar toGerund = function toGerund(vb, parsed) {\n  var _vb$methods$two$trans2 = vb.methods.two.transform,\n      verbConjugate = _vb$methods$two$trans2.verbConjugate,\n      verbToInfinitive = _vb$methods$two$trans2.verbToInfinitive;\n  var root = parsed.root;\n  var str = root.text('normal');\n  str = verbToInfinitive(str, vb.model, getTense(root)); // 'i walk' vs 'he walks'\n\n  if (isPlural(vb, parsed) === false) {\n    str = verbConjugate(str, vb.model).Gerund;\n  }\n\n  if (str) {\n    vb = vb.replace(root, str, keep);\n    vb.not('#Particle').tag('Gerund');\n  }\n\n  return vb;\n};\n\nvar toInfinitive = function toInfinitive(vb, parsed) {\n  var verbToInfinitive = vb.methods.two.transform.verbToInfinitive;\n  var root = parsed.root;\n  var str = parsed.root.text('normal');\n  str = verbToInfinitive(str, vb.model, getTense(root));\n\n  if (str) {\n    vb = vb.replace(parsed.root, str, keep);\n  }\n\n  return vb;\n};\n\nvar forms = {\n  // walk\n  'infinitive': simple,\n  // he walks -> he walked\n  'simple-present': function simplePresent(vb, parsed) {\n    var verbConjugate = vb.methods.two.transform.verbConjugate;\n    var root = parsed.root; // is it *only* a infinitive? - 'we buy' etc\n\n    if (root.has('#Infinitive')) {\n      var subj = getSubject(vb, parsed);\n      var m = subj.subject;\n\n      if (isPlural(vb, parsed) || m.has('i')) {\n        // keep it infinitive\n        return vb;\n      }\n\n      var str = root.text('normal');\n      var pres = verbConjugate(str, vb.model).PresentTense;\n\n      if (str !== pres) {\n        vb.replace(root, pres, keep);\n      }\n    } else {\n      return simple(vb, parsed);\n    }\n\n    return vb;\n  },\n  // he walked\n  'simple-past': simple,\n  // he will walk -> he walked\n  'simple-future': function simpleFuture(vb, parsed) {\n    var root = parsed.root,\n        auxiliary = parsed.auxiliary; // handle 'will be'\n\n    if (auxiliary.has('will') && root.has('be')) {\n      var str = isAreAm(vb, parsed);\n      vb.replace(root, str);\n      vb = vb.remove('will');\n      vb.replace('not ' + str, str + ' not');\n    } else {\n      simple(vb, parsed);\n      vb = vb.remove('will');\n    }\n\n    return vb;\n  },\n  // is walking ->\n  'present-progressive': noop,\n  // was walking -> is walking\n  'past-progressive': function pastProgressive(vb, parsed) {\n    var str = isAreAm(vb, parsed);\n    return vb.replace('(were|was)', str, keep);\n  },\n  // will be walking -> is walking\n  'future-progressive': function futureProgressive(vb) {\n    vb.match('will').insertBefore('is');\n    vb.remove('be');\n    return vb.remove('will');\n  },\n  // has walked ->  (?)\n  'present-perfect': function presentPerfect(vb, parsed) {\n    simple(vb, parsed);\n    vb = vb.remove('(have|had|has)');\n    return vb;\n  },\n  // had walked -> has walked\n  'past-perfect': function pastPerfect(vb, parsed) {\n    // not 'we has walked'\n    var subj = getSubject(vb, parsed);\n    var m = subj.subject;\n\n    if (isPlural(vb, parsed) || m.has('i')) {\n      vb = toInf(vb, parsed); // we walk\n\n      vb.remove('had');\n      return vb;\n    }\n\n    vb.replace('had', 'has', keep);\n    return vb;\n  },\n  // will have walked -> has walked\n  'future-perfect': function futurePerfect(vb) {\n    vb.match('will').insertBefore('has');\n    return vb.remove('have').remove('will');\n  },\n  // has been walking\n  'present-perfect-progressive': noop,\n  // had been walking\n  'past-perfect-progressive': function pastPerfectProgressive(vb) {\n    return vb.replace('had', 'has', keep);\n  },\n  // will have been -> has been\n  'future-perfect-progressive': function futurePerfectProgressive(vb) {\n    vb.match('will').insertBefore('has');\n    return vb.remove('have').remove('will');\n  },\n  // got walked -> is walked\n  // was walked -> is walked\n  // had been walked -> is walked\n  'passive-past': function passivePast(vb, parsed) {\n    var str = isAreAm(vb, parsed);\n\n    if (vb.has('(had|have|has)') && vb.has('been')) {\n      vb.replace('(had|have|has)', str, keep);\n      vb.replace('been', 'being');\n      return vb;\n    }\n\n    return vb.replace('(got|was|were)', str);\n  },\n  // is being walked  ->\n  'passive-present': noop,\n  // will be walked -> is being walked\n  'passive-future': function passiveFuture(vb) {\n    vb.replace('will', 'is');\n    return vb.replace('be', 'being');\n  },\n  // would be walked ->\n  'present-conditional': noop,\n  // would have been walked ->\n  'past-conditional': function pastConditional(vb) {\n    vb.replace('been', 'be');\n    return vb.remove('have');\n  },\n  // is going to drink -> is drinking\n  'auxiliary-future': function auxiliaryFuture(vb, parsed) {\n    toGerund(vb, parsed);\n    vb.remove('(going|to)');\n    return vb;\n  },\n  // used to walk -> is walking\n  // did walk -> is walking\n  'auxiliary-past': function auxiliaryPast(vb, parsed) {\n    // 'did provide' -> 'does provide'\n    if (parsed.auxiliary.has('did')) {\n      var str = doDoes(vb, parsed);\n      vb.replace(parsed.auxiliary, str);\n      return vb;\n    }\n\n    toGerund(vb, parsed);\n    vb.replace(parsed.auxiliary, 'is');\n    return vb;\n  },\n  // we do walk ->\n  'auxiliary-present': noop,\n  // must walk -> 'must have walked'\n  'modal-infinitive': noop,\n  // must have walked\n  'modal-past': function modalPast(vb, parsed) {\n    toInfinitive(vb, parsed);\n    return vb.remove('have');\n  },\n  // started looking\n  'gerund-phrase': function gerundPhrase(vb, parsed) {\n    parsed.root = parsed.root.not('#Gerund$');\n    simple(vb, parsed);\n    return vb.remove('(will|have)');\n  },\n  // wanted to walk\n  'want-infinitive': function wantInfinitive(vb, parsed) {\n    var str = 'wants';\n\n    if (isPlural(vb, parsed)) {\n      str = 'want'; //we want\n    }\n\n    vb.replace('(want|wanted|wants)', str, keep);\n    vb.remove('will');\n    return vb;\n  }\n};\n\nvar toPresent = function toPresent(vb, parsed, form) {\n  // console.log(form)\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed);\n    vb.fullSentence().compute(['lexicon', 'preTagger', 'postTagger', 'chunks']);\n    return vb;\n  }\n\n  return vb;\n};\n\nexport default toPresent;","map":null,"metadata":{},"sourceType":"module"}