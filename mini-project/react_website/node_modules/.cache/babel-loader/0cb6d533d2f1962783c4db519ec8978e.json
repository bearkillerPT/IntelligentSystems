{"ast":null,"code":"// extract the clear needs for an individual match token\nvar getTokenNeeds = function getTokenNeeds(reg) {\n  // negatives can't be cached\n  if (reg.optional === true || reg.negative === true) {\n    return null;\n  }\n\n  if (reg.tag) {\n    return '#' + reg.tag;\n  }\n\n  if (reg.word) {\n    return reg.word;\n  }\n\n  if (reg.switch) {\n    return \"%\".concat(reg.switch, \"%\");\n  }\n\n  return null;\n};\n\nvar getNeeds = function getNeeds(regs) {\n  var needs = [];\n  regs.forEach(function (reg) {\n    needs.push(getTokenNeeds(reg)); // support AND (foo && tag)\n\n    if (reg.operator === 'and' && reg.choices) {\n      reg.choices.forEach(function (oneSide) {\n        oneSide.forEach(function (r) {\n          needs.push(getTokenNeeds(r));\n        });\n      });\n    }\n  });\n  return needs.filter(function (str) {\n    return str;\n  });\n};\n\nvar getWants = function getWants(regs) {\n  var wants = [];\n  var count = 0;\n  regs.forEach(function (reg) {\n    if (reg.operator === 'or' && !reg.optional && !reg.negative) {\n      // add fast-or terms\n      if (reg.fastOr) {\n        Array.from(reg.fastOr).forEach(function (w) {\n          wants.push(w);\n        });\n      } // add slow-or\n\n\n      if (reg.choices) {\n        reg.choices.forEach(function (rs) {\n          rs.forEach(function (r) {\n            var n = getTokenNeeds(r);\n\n            if (n) {\n              wants.push(n);\n            }\n          });\n        });\n      }\n\n      count += 1;\n    }\n  });\n  return {\n    wants: wants,\n    count: count\n  };\n};\n\nvar parse = function parse(matches, world) {\n  var parseMatch = world.methods.one.parseMatch;\n  matches.forEach(function (obj) {\n    obj.regs = parseMatch(obj.match, {}, world); // wrap these ifNo properties into an array\n\n    if (typeof obj.ifNo === 'string') {\n      obj.ifNo = [obj.ifNo];\n    } // cache any requirements up-front \n\n\n    obj.needs = getNeeds(obj.regs);\n\n    var _getWants = getWants(obj.regs),\n        wants = _getWants.wants,\n        count = _getWants.count;\n\n    obj.wants = wants;\n    obj.minWant = count; // get rid of tiny sentences\n\n    obj.minWords = obj.regs.filter(function (o) {\n      return !o.optional;\n    }).length;\n  });\n  return matches;\n};\n\nexport default parse;","map":null,"metadata":{},"sourceType":"module"}