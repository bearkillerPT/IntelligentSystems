{"ast":null,"code":"import { hasHyphen, splitHyphens } from './01-hyphens.js';\nimport combineRanges from './03-ranges.js';\nimport combineSlashes from './02-slashes.js';\nvar wordlike = /\\S/;\nvar isBoundary = /^[!?.]+$/;\nvar naiiveSplit = /(\\S+)/;\nvar notWord = ['.', '?', '!', ':', ';', '-', '–', '—', '--', '...', '(', ')', '[', ']', '\"', \"'\", '`'];\nnotWord = notWord.reduce(function (h, c) {\n  h[c] = true;\n  return h;\n}, {});\n\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}; //turn a string into an array of strings (naiive for now, lumped later)\n\n\nvar splitWords = function splitWords(str, model) {\n  var result = [];\n  var arr = []; //start with a naiive split\n\n  str = str || '';\n\n  if (typeof str === 'number') {\n    str = String(str);\n  }\n\n  if (isArray(str)) {\n    return str;\n  }\n\n  var words = str.split(naiiveSplit);\n\n  for (var i = 0; i < words.length; i++) {\n    //split 'one-two'\n    if (hasHyphen(words[i], model) === true) {\n      arr = arr.concat(splitHyphens(words[i]));\n      continue;\n    }\n\n    arr.push(words[i]);\n  } //greedy merge whitespace+arr to the right\n\n\n  var carry = '';\n\n  for (var _i = 0; _i < arr.length; _i++) {\n    var word = arr[_i]; //if it's more than a whitespace\n\n    if (wordlike.test(word) === true && notWord.hasOwnProperty(word) === false && isBoundary.test(word) === false) {\n      //put whitespace on end of previous term, if possible\n      if (result.length > 0) {\n        result[result.length - 1] += carry;\n        result.push(word);\n      } else {\n        //otherwise, but whitespace before\n        result.push(carry + word);\n      }\n\n      carry = '';\n    } else {\n      carry += word;\n    }\n  } //handle last one\n\n\n  if (carry) {\n    if (result.length === 0) {\n      result[0] = '';\n    }\n\n    result[result.length - 1] += carry; //put it on the end\n  } // combine 'one / two'\n\n\n  result = combineSlashes(result);\n  result = combineRanges(result); // remove empty results\n\n  result = result.filter(function (s) {\n    return s;\n  });\n  return result;\n};\n\nexport default splitWords;","map":null,"metadata":{},"sourceType":"module"}