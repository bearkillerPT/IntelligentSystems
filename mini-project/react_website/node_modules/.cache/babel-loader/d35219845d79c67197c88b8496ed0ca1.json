{"ast":null,"code":"import methods from './methods.js';\n/*\n A JavaScript implementation of a Trie search datastructure.\nEach node of the Trie is an Object that can contain the following properties:\n      '' - If present (with value == 1), the node is a Terminal Node - the prefix\n          leading to this node is a word in the dictionary.\n      numeric properties (value == 1) - the property name is a terminal string\n          so that the prefix + string is a word in the dictionary.\n      Object properties - the property name is one or more characters to be consumed\n          from the prefix of the test string, with the remainder to be checked in\n          the child node.\n      '_c': A unique name for the node (starting from 1), used in combining Suffixes.\n      '_n': Created when packing the Trie, the sequential node number\n          (in pre-order traversal).\n      '_d': The number of times a node is shared (it's in-degree from other nodes).\n      '_v': Visited in DFS.\n      '_g': For singleton nodes, the name of it's single property.\n */\n\nvar Trie = function Trie(words) {\n  this.root = {};\n  this.lastWord = '';\n  this.suffixes = {};\n  this.suffixCounts = {};\n  this.cNext = 1;\n  this.wordCount = 0;\n  this.insertWords(words);\n  this.vCur = 0;\n};\n\nObject.keys(methods).forEach(function (k) {\n  Trie.prototype[k] = methods[k];\n});\nexport default Trie;","map":null,"metadata":{},"sourceType":"module"}