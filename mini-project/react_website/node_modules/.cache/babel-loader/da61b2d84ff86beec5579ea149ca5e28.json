{"ast":null,"code":"import getHooks from './01-getHooks.js';\nimport trimDown from './02-trim-down.js'; // import getWants from './03-get-wants.js'\n\nimport runMatch from './04-runMatch.js';\n\nvar tooSmall = function tooSmall(maybeList, document) {\n  return maybeList.map(function (arr, i) {\n    var termCount = document[i].length;\n    arr = arr.filter(function (o) {\n      return termCount >= o.minWords;\n    });\n    return arr;\n  });\n};\n\nvar sweep = function sweep(document, net, methods) {\n  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // find suitable matches to attempt, on each sentence\n  var docCache = methods.one.cacheDoc(document); // collect possible matches for this document\n\n  var maybeList = getHooks(docCache, net.hooks); // ensure all defined needs are met for each match\n\n  maybeList = trimDown(maybeList, docCache); // add unchacheable matches to each sentence's todo-list\n\n  if (net.always.length > 0) {\n    maybeList = maybeList.map(function (arr) {\n      return arr.concat(net.always);\n    });\n  } // if we don't have enough words\n\n\n  maybeList = tooSmall(maybeList, document); // maybeList.forEach((arr, i) => {\n  //   let txt = document[i].map(t => t.text).join(' ')\n  //   console.log(`==== ${txt} ====`)\n  //   arr.forEach(m => {\n  //     console.log(`    - ${m.match}`)\n  //   })\n  // })\n  // now actually run the matches\n\n  var results = runMatch(maybeList, document, methods, opts); // console.dir(results, { depth: 5 })\n\n  return results;\n};\n\nexport default sweep;","map":null,"metadata":{},"sourceType":"module"}