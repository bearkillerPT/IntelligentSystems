{"ast":null,"code":"var termLoop = function termLoop(view, cb) {\n  view.docs.forEach(function (terms) {\n    terms.forEach(cb);\n  });\n};\n\nexport default {\n  // remove titlecasing, uppercase\n  'case': function _case(doc) {\n    termLoop(doc, function (term) {\n      term.text = term.text.toLowerCase();\n    });\n  },\n  // visually romanize/anglicize 'Björk' into 'Bjork'.\n  'unicode': function unicode(doc) {\n    var world = doc.world;\n    var killUnicode = world.methods.one.killUnicode;\n    termLoop(doc, function (term) {\n      return term.text = killUnicode(term.text, world);\n    });\n  },\n  // remove hyphens, newlines, and force one space between words\n  'whitespace': function whitespace(doc) {\n    termLoop(doc, function (term) {\n      // one space between words\n      term.post = term.post.replace(/\\s+/g, ' ');\n      term.post = term.post.replace(/\\s([.,?!:;])/g, '$1'); //no whitespace before a period, etc\n      // no whitepace before a word\n\n      term.pre = term.pre.replace(/\\s+/g, '');\n    });\n  },\n  // remove commas, semicolons - but keep sentence-ending punctuation\n  'punctuation': function punctuation(doc) {\n    termLoop(doc, function (term) {\n      // turn dashes to spaces\n      term.post = term.post.replace(/[–—-]/g, ' '); // remove comma, etc \n\n      term.post = term.post.replace(/[,:;]/g, ''); // remove elipses\n\n      term.post = term.post.replace(/\\.{2,}/g, ''); // remove repeats\n\n      term.post = term.post.replace(/\\?{2,}/g, '?');\n      term.post = term.post.replace(/!{2,}/g, '!'); // replace ?!\n\n      term.post = term.post.replace(/\\?!+/g, '?');\n    }); // trim end\n\n    var docs = doc.docs;\n    var terms = docs[docs.length - 1];\n\n    if (terms && terms.length > 0) {\n      var lastTerm = terms[terms.length - 1];\n      lastTerm.post = lastTerm.post.replace(/ /g, '');\n    }\n  },\n  // ====== subsets ===\n  // turn \"isn't\" to \"is not\"\n  'contractions': function contractions(doc) {\n    doc.contractions().expand();\n  },\n  //remove periods from acronyms, like 'F.B.I.'\n  'acronyms': function acronyms(doc) {\n    doc.acronyms().strip();\n  },\n  //remove words inside brackets (like these)\n  'parentheses': function parentheses(doc) {\n    doc.parentheses().strip();\n  },\n  // turn \"Google's tax return\" to \"Google tax return\"\n  'possessives': function possessives(doc) {\n    doc.possessives().strip();\n  },\n  // turn \"tax return\" to tax return\n  'quotations': function quotations(doc) {\n    doc.quotations().strip();\n  },\n  // remove them\n  'emoji': function emoji(doc) {\n    doc.emojis().remove();\n  },\n  //turn 'Vice Admiral John Smith' to 'John Smith'\n  'honorifics': function honorifics(doc) {\n    doc.match('#Honorific+ #Person').honorifics().remove();\n  },\n  // remove needless adverbs\n  'adverbs': function adverbs(doc) {\n    doc.adverbs().remove();\n  },\n  // turn \"batmobiles\" into \"batmobile\"\n  'nouns': function nouns(doc) {\n    doc.nouns().toSingular();\n  },\n  // turn all verbs into Infinitive form - \"I walked\" → \"I walk\"\n  'verbs': function verbs(doc) {\n    doc.verbs().toInfinitive();\n  },\n  // turn \"fifty\" into \"50\"\n  'numbers': function numbers(doc) {\n    doc.numbers().toNumber();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}