{"ast":null,"code":"/* eslint no-console: 0 */\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n};\n\nvar fns = {\n  /** add a given tag, to all these terms */\n  tag: function tag(input) {\n    var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var isSafe = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!this.found || !input) {\n      return this;\n    }\n\n    var terms = this.termList();\n\n    if (terms.length === 0) {\n      return this;\n    }\n\n    var methods = this.methods,\n        verbose = this.verbose,\n        world = this.world; // logger\n\n    if (verbose === true) {\n      console.log(' +  ', input, reason || '');\n    }\n\n    if (isArray(input)) {\n      input.forEach(function (tag) {\n        return methods.one.setTag(terms, tag, world, isSafe, reason);\n      });\n    } else {\n      methods.one.setTag(terms, input, world, isSafe, reason);\n    } // uncache\n\n\n    this.uncache();\n    return this;\n  },\n\n  /** add a given tag, only if it is consistent */\n  tagSafe: function tagSafe(input) {\n    var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return this.tag(input, reason, true);\n  },\n\n  /** remove a given tag from all these terms */\n  unTag: function unTag(input, reason) {\n    if (!this.found || !input) {\n      return this;\n    }\n\n    var terms = this.termList();\n\n    if (terms.length === 0) {\n      return this;\n    }\n\n    var methods = this.methods,\n        verbose = this.verbose,\n        model = this.model; // logger\n\n    if (verbose === true) {\n      console.log(' -  ', input, reason || '');\n    }\n\n    var tagSet = model.one.tagSet;\n\n    if (isArray(input)) {\n      input.forEach(function (tag) {\n        return methods.one.unTag(terms, tag, tagSet);\n      });\n    } else {\n      methods.one.unTag(terms, input, tagSet);\n    } // uncache\n\n\n    this.uncache();\n    return this;\n  },\n\n  /** return only the terms that can be this tag  */\n  canBe: function canBe(tag) {\n    var tagSet = this.model.one.tagSet; // everything can be an unknown tag\n\n    if (!tagSet.hasOwnProperty(tag)) {\n      return this;\n    }\n\n    var not = tagSet[tag].not || [];\n    var nope = [];\n    this.document.forEach(function (terms, n) {\n      terms.forEach(function (term, i) {\n        var found = not.find(function (no) {\n          return term.tags.has(no);\n        });\n\n        if (found) {\n          nope.push([n, i, i + 1]);\n        }\n      });\n    });\n    var noDoc = this.update(nope);\n    return this.difference(noDoc);\n  }\n};\nexport default fns;","map":null,"metadata":{},"sourceType":"module"}