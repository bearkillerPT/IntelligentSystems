{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport find from '../find.js';\nimport parseNoun from './parse.js';\nimport toJSON from './toJSON.js';\nimport _toPlural from './toPlural.js';\nimport _toSingular from './toSingular.js'; // return the nth elem of a doc\n\nvar getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n}; // const isObject = val => Object.prototype.toString.call(val) === '[object Object]'\n\n\nvar api = function api(View) {\n  var Nouns = /*#__PURE__*/function (_View) {\n    _inherits(Nouns, _View);\n\n    function Nouns(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Nouns);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Nouns).call(this, document, pointer, groups));\n      _this.viewType = 'Nouns';\n      return _this;\n    }\n\n    _createClass(Nouns, [{\n      key: \"parse\",\n      value: function parse(n) {\n        return getNth(this, n).map(parseNoun);\n      }\n    }, {\n      key: \"json\",\n      value: function json() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.map(function (m) {\n          var json = m.toView().json(opts)[0] || {};\n\n          if (opts && opts.noun !== true) {\n            json.noun = toJSON(m);\n          }\n\n          return json;\n        }, []);\n      }\n    }, {\n      key: \"isPlural\",\n      value: function isPlural(n) {\n        var arr = this.filter(function (m) {\n          return parseNoun(m).isPlural;\n        });\n        return getNth(arr, n);\n      }\n    }, {\n      key: \"adjectives\",\n      value: function adjectives(n) {\n        var list = this.update([]);\n        this.forEach(function (m) {\n          var adj = parseNoun(m).adjectives;\n\n          if (adj.found) {\n            list = list.concat(adj);\n          }\n        });\n        return getNth(list, n);\n      }\n    }, {\n      key: \"toPlural\",\n      value: function toPlural(n) {\n        return getNth(this, n).map(function (m) {\n          return _toPlural(m, parseNoun(m));\n        }); // return new Nouns(all.document, all.pointer)\n      }\n    }, {\n      key: \"toSingular\",\n      value: function toSingular(n) {\n        return getNth(this, n).map(function (m) {\n          var res = parseNoun(m);\n          return _toSingular(m, res);\n        });\n      } // create a new View, from this one\n\n    }, {\n      key: \"update\",\n      value: function update(pointer) {\n        var m = new Nouns(this.document, pointer);\n        m._cache = this._cache; // share this full thing\n\n        return m;\n      }\n    }]);\n\n    return Nouns;\n  }(View);\n\n  View.prototype.nouns = function (n) {\n    var m = find(this);\n    m = getNth(m, n);\n    return new Nouns(this.document, m.pointer);\n  };\n};\n\nexport default api;","map":null,"metadata":{},"sourceType":"module"}