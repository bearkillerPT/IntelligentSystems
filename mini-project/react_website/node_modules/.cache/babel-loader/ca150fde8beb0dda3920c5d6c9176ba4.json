{"ast":null,"code":"// match  'foo /yes/' and not 'foo/no/bar'\nvar bySlashes = /(?:^|\\s)([![^]*(?:<[^<]*>)?\\/.*?[^\\\\/]\\/[?\\]+*$~]*)(?:\\s|$)/; // match '(yes) but not foo(no)bar'\n\nvar byParentheses = /([!~[^]*(?:<[^<]*>)?\\([^)]+[^\\\\)]\\)[?\\]+*$~]*)(?:\\s|$)/; // okay\n\nvar byWord = / /g;\n\nvar isBlock = function isBlock(str) {\n  return /^[![^]*(<[^<]*>)?\\(/.test(str) && /\\)[?\\]+*$~]*$/.test(str);\n};\n\nvar isReg = function isReg(str) {\n  return /^[![^]*(<[^<]*>)?\\//.test(str) && /\\/[?\\]+*$~]*$/.test(str);\n};\n\nvar cleanUp = function cleanUp(arr) {\n  arr = arr.map(function (str) {\n    return str.trim();\n  });\n  arr = arr.filter(function (str) {\n    return str;\n  });\n  return arr;\n};\n\nvar parseBlocks = function parseBlocks(txt) {\n  // parse by /regex/ first\n  var arr = txt.split(bySlashes);\n  var res = []; // parse by (blocks), next\n\n  arr.forEach(function (str) {\n    if (isReg(str)) {\n      res.push(str);\n      return;\n    }\n\n    res = res.concat(str.split(byParentheses));\n  });\n  res = cleanUp(res); // split by spaces, now\n\n  var final = [];\n  res.forEach(function (str) {\n    if (isBlock(str)) {\n      final.push(str);\n    } else if (isReg(str)) {\n      final.push(str);\n    } else {\n      final = final.concat(str.split(byWord));\n    }\n  });\n  final = cleanUp(final);\n  return final;\n};\n\nexport default parseBlocks;","map":null,"metadata":{},"sourceType":"module"}