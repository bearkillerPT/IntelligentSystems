{"ast":null,"code":"import classify from '../classify/index.js';\n\nvar green = function green(str) {\n  return '\\x1b[32m' + str + '\\x1b[0m';\n};\n\nvar red = function red(str) {\n  return '\\x1b[31m' + str + '\\x1b[0m';\n};\n\nvar yellow = function yellow(str) {\n  return '\\x1b[33m' + str + '\\x1b[0m';\n};\n\nvar dim = function dim(str) {\n  return '\\x1b[2m' + str + '\\x1b[0m';\n};\n\nvar percent = function percent(part, total) {\n  var num = part / total * 100;\n  num = Math.round(num * 10) / 10;\n  return num + '%';\n};\n\nvar testSide = function testSide(pairs, model, side) {\n  var nulls = 0;\n  var wrong = 0;\n  var right = 0;\n  pairs.forEach(function (a) {\n    var str = side === 'Left' ? a[0] : a[1];\n    var found = classify(str, model, true);\n\n    if (found === null) {\n      nulls += 1;\n      return;\n    }\n\n    if (found === side) {\n      right += 1;\n      return;\n    }\n\n    wrong += 1;\n  });\n  console.log(\"  [\".concat(side, \"]:\"));\n  console.log(yellow(\"      nulls:\"), nulls.toLocaleString(), '  ', dim(percent(nulls, pairs.length)));\n  console.log(green(\"      right:\"), right.toLocaleString(), '  ', dim(percent(right, pairs.length)));\n  console.log(red(\"      wrong:\"), wrong.toLocaleString(), '  ', dim(percent(wrong, pairs.length)));\n};\n\nexport default testSide;","map":null,"metadata":{},"sourceType":"module"}