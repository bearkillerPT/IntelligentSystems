{"ast":null,"code":"var prefix = /^(under|over|mis|re|un|dis|semi|pre|post)-?/; // anti|non|extra|inter|intra|over\n\nvar allowPrefix = new Set(['Verb', 'Infinitive', 'PastTense', 'Gerund', 'PresentTense', 'Adjective', 'Participle']); // tag any words in our lexicon\n\nvar checkLexicon = function checkLexicon(terms, i, world) {\n  var model = world.model,\n      methods = world.methods; // const fastTag = methods.one.fastTag\n\n  var setTag = methods.one.setTag;\n  var lexicon = model.one.lexicon; // basic lexicon lookup\n\n  var t = terms[i];\n  var word = t.machine || t.normal; // normal lexicon lookup\n\n  if (lexicon[word] !== undefined && lexicon.hasOwnProperty(word)) {\n    var tag = lexicon[word];\n    setTag([t], tag, world, false, '1-lexicon'); // fastTag(t, tag, '1-lexicon')\n\n    return true;\n  } // lookup aliases in the lexicon\n\n\n  if (t.alias) {\n    var found = t.alias.find(function (str) {\n      return lexicon.hasOwnProperty(str);\n    });\n\n    if (found) {\n      var _tag = lexicon[found];\n      setTag([t], _tag, world, false, '1-lexicon-alias'); // fastTag(t, tag, '1-lexicon-alias')\n\n      return true;\n    }\n  } // prefixing for verbs/adjectives\n\n\n  if (prefix.test(word) === true) {\n    var stem = word.replace(prefix, '');\n\n    if (lexicon.hasOwnProperty(stem) && stem.length > 3) {\n      // only allow prefixes for verbs/adjectives\n      if (allowPrefix.has(lexicon[stem])) {\n        // console.log('->', word, stem, lexicon[stem])\n        setTag([t], lexicon[stem], world, false, '1-lexicon-prefix'); // fastTag(t, lexicon[stem], '1-lexicon-prefix')\n\n        return true;\n      }\n    }\n  }\n\n  return null;\n};\n\nexport default checkLexicon;","map":null,"metadata":{},"sourceType":"module"}