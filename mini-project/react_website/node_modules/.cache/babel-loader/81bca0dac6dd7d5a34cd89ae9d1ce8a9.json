{"ast":null,"code":"var dollarStub = /\\$[0-9a-z]+/g;\nvar fns = {};\n\nvar titleCase = function titleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();\n  });\n}; // doc.replace('foo', (m)=>{})\n\n\nvar replaceByFn = function replaceByFn(main, fn) {\n  main.forEach(function (m) {\n    var out = fn(m);\n    m.replaceWith(out);\n  });\n  return main;\n}; // support 'foo $0' replacements\n\n\nvar subDollarSign = function subDollarSign(input, main) {\n  if (typeof input !== 'string') {\n    return input;\n  }\n\n  var groups = main.groups();\n  input = input.replace(dollarStub, function (a) {\n    var num = a.replace(/\\$/, '');\n\n    if (groups.hasOwnProperty(num)) {\n      return groups[num].text();\n    }\n\n    return a;\n  });\n  return input;\n};\n\nfns.replaceWith = function (input) {\n  var keep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ptrs = this.fullPointer;\n  var main = this;\n\n  if (typeof input === 'function') {\n    return replaceByFn(main, input);\n  } // support 'foo $0' replacements\n\n\n  input = subDollarSign(input, main);\n  var original = this.update(ptrs); // soften-up pointer\n\n  ptrs = ptrs.map(function (ptr) {\n    return ptr.slice(0, 3);\n  }); // original.freeze()\n\n  var oldTags = (original.docs[0] || []).map(function (term) {\n    return Array.from(term.tags);\n  }); // slide this in\n\n  main.insertAfter(input); // are we replacing part of a contraction?\n\n  if (original.has('@hasContraction') && main.contractions) {\n    var more = main.grow('@hasContraction+');\n    more.contractions().expand();\n  } // delete the original terms\n\n\n  main.delete(original); //science.\n  // what should we return?\n\n  var m = main.toView(ptrs).compute(['index', 'lexicon']);\n\n  if (m.world.compute.preTagger) {\n    m.compute('preTagger');\n  } // replace any old tags\n\n\n  if (keep.tags) {\n    m.terms().forEach(function (term, i) {\n      term.tagSafe(oldTags[i]);\n    });\n  } // try to co-erce case, too\n\n\n  if (keep.case && m.docs[0] && m.docs[0][0] && m.docs[0][0].index[1] === 0) {\n    m.docs[0][0].text = titleCase(m.docs[0][0].text);\n  }\n\n  return m;\n};\n\nfns.replace = function (match, input, keep) {\n  if (match && !input) {\n    return this.replaceWith(match, keep);\n  }\n\n  var m = this.match(match);\n\n  if (!m.found) {\n    return this;\n  }\n\n  return m.replaceWith(input, keep);\n};\n\nexport default fns;","map":null,"metadata":{},"sourceType":"module"}