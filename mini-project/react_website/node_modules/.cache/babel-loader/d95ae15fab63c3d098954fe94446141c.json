{"ast":null,"code":"var isObject = function isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n};\n\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}; // internal Term objects are slightly different\n\n\nvar fromJson = function fromJson(json) {\n  return json.map(function (o) {\n    return o.terms.map(function (term) {\n      if (isArray(term.tags)) {\n        term.tags = new Set(term.tags);\n      }\n\n      return term;\n    });\n  });\n}; // interpret an array-of-arrays\n\n\nvar preTokenized = function preTokenized(arr) {\n  return arr.map(function (a) {\n    return a.map(function (str) {\n      return {\n        text: str,\n        normal: str,\n        //cleanup\n        pre: '',\n        post: ' ',\n        tags: new Set()\n      };\n    });\n  });\n};\n\nvar inputs = function inputs(input, View, world) {\n  var methods = world.methods;\n  var doc = new View([]);\n  doc.world = world; // support a number\n\n  if (typeof input === 'number') {\n    input = String(input);\n  } // return empty doc\n\n\n  if (!input) {\n    return doc;\n  } // parse a string\n\n\n  if (typeof input === 'string') {\n    var document = methods.one.tokenize.fromString(input, world);\n    return new View(document);\n  } // handle compromise View\n\n\n  if (isObject(input) && input.isView) {\n    return new View(input.document, input.ptrs);\n  } // handle json input\n\n\n  if (isArray(input)) {\n    // pre-tokenized array-of-arrays \n    if (isArray(input[0])) {\n      var _document2 = preTokenized(input);\n\n      return new View(_document2);\n    } // handle json output\n\n\n    var _document = fromJson(input);\n\n    return new View(_document);\n  }\n\n  return doc;\n};\n\nexport default inputs;","map":null,"metadata":{},"sourceType":"module"}