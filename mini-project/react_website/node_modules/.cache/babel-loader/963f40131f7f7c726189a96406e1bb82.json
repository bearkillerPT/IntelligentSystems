{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nvar forEach = function forEach(cb) {\n  var _this = this;\n\n  var ptrs = this.fullPointer;\n  ptrs.forEach(function (ptr, i) {\n    var view = _this.update([ptr]);\n\n    cb(view, i);\n  });\n  return this;\n};\n\nvar map = function map(cb, empty) {\n  var _this2 = this;\n\n  var ptrs = this.fullPointer; // let cache = this._cache || []\n\n  var res = ptrs.map(function (ptr, i) {\n    var view = _this2.update([ptr]); // view._cache = cache[i]\n\n\n    return cb(view, i);\n  });\n\n  if (res.length === 0) {\n    return empty || this.update([]);\n  } // return an array of values, or View objects?\n  // user can return either from their callback\n\n\n  if (res[0] !== undefined) {\n    // array of strings\n    if (typeof res[0] === 'string') {\n      return res;\n    } // array of objects\n\n\n    if (_typeof(res[0]) === 'object' && (res[0] === null || !res[0].isView)) {\n      return res;\n    }\n  } // return a View object\n\n\n  var all = [];\n  res.forEach(function (ptr) {\n    all = all.concat(ptr.fullPointer);\n  });\n  return this.toView(all);\n};\n\nvar filter = function filter(cb) {\n  var _this3 = this;\n\n  var ptrs = this.fullPointer; // let cache = this._cache || []\n\n  ptrs = ptrs.filter(function (ptr, i) {\n    var view = _this3.update([ptr]); // view._cache = cache[i]\n\n\n    return cb(view, i);\n  });\n  var res = this.update(ptrs); //TODO: keep caches automatically\n  // res._cache = ptrs.map(ptr => cache[ptr[0]])\n\n  return res;\n};\n\nvar find = function find(cb) {\n  var _this4 = this;\n\n  var ptrs = this.fullPointer; // let cache = this._cache || []\n\n  var found = ptrs.find(function (ptr, i) {\n    var view = _this4.update([ptr]); // view._cache = cache[i]\n\n\n    return cb(view, i);\n  });\n  return this.update([found]);\n};\n\nvar some = function some(cb) {\n  var _this5 = this;\n\n  var ptrs = this.fullPointer; // let cache = this._cache || []\n\n  return ptrs.some(function (ptr, i) {\n    var view = _this5.update([ptr]); // view._cache = cache[i]\n\n\n    return cb(view, i);\n  });\n};\n\nvar random = function random() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var ptrs = this.fullPointer;\n  var r = Math.floor(Math.random() * ptrs.length); //prevent it from going over the end\n\n  if (r + n > this.length) {\n    r = this.length - n;\n    r = r < 0 ? 0 : r;\n  }\n\n  ptrs = ptrs.slice(r, r + n);\n  return this.update(ptrs);\n};\n\nexport default {\n  forEach: forEach,\n  map: map,\n  filter: filter,\n  find: find,\n  some: some,\n  random: random\n};","map":null,"metadata":{},"sourceType":"module"}