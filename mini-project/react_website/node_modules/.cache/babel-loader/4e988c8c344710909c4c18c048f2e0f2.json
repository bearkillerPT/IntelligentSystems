{"ast":null,"code":"// get suffix-rules according to last char of word\nvar getRules = function getRules(word, modelRules) {\n  var char = word[word.length - 1];\n  var rules = modelRules[char] || []; // if (modelRules['']) {\n  //   // do we have a generic suffix?\n  //   rules = rules.concat(modelRules[''])\n  // }\n\n  return rules;\n};\n\nvar classify = function classify(str, model, debug) {\n  var l = 'Left';\n  var r = 'Right'; // check known exceptions\n\n  if (model.exceptions.hasOwnProperty(str)) {\n    return l;\n  }\n\n  var list = Object.entries(model.exceptions);\n\n  for (var i = 0; i < list.length; i += 1) {\n    if (list[i][1] === str) {\n      return r;\n    }\n  } // check rules\n\n\n  var rules = getRules(str, model.rules);\n\n  for (var _i = 0; _i < rules.length; _i += 1) {\n    if (str.endsWith(rules[_i][0])) {\n      return l;\n    }\n  }\n\n  rules = getRules(str, model.rev);\n\n  for (var _i2 = 0; _i2 < rules.length; _i2 += 1) {\n    if (str.endsWith(rules[_i2][0])) {\n      return r;\n    }\n  } // check weak-side of rules\n\n\n  rules = getRules(str, model.rules);\n\n  for (var _i3 = 0; _i3 < rules.length; _i3 += 1) {\n    if (str.endsWith(rules[_i3][1])) {\n      return r;\n    }\n  }\n\n  rules = getRules(str, model.rev);\n\n  for (var _i4 = 0; _i4 < rules.length; _i4 += 1) {\n    if (str.endsWith(rules[_i4][1])) {\n      return l;\n    }\n  }\n\n  return null;\n};\n\nexport default classify;","map":null,"metadata":{},"sourceType":"module"}