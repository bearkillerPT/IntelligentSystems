{"ast":null,"code":"import tagSwitch from './2nd-pass/00-tagSwitch.js';\nimport checkCase from './2nd-pass/01-case.js';\nimport checkSuffix from './2nd-pass/02-suffix.js';\nimport checkRegex from './2nd-pass/03-regex.js';\nimport checkPrefix from './2nd-pass/04-prefix.js';\nimport checkYear from './2nd-pass/05-year.js';\nimport fillTags from './3rd-pass/_fillTags.js';\nimport checkAcronym from './3rd-pass/01-acronym.js';\nimport neighbours from './3rd-pass/02-neighbours.js';\nimport orgWords from './3rd-pass/03-orgWords.js';\nimport nounFallback from './3rd-pass/04-fallback.js';\nimport variables from './3rd-pass/06-switches.js';\nimport checkHyphen from './3rd-pass/05-prefixes.js';\nvar second = {\n  tagSwitch: tagSwitch,\n  checkSuffix: checkSuffix,\n  checkRegex: checkRegex,\n  checkCase: checkCase,\n  checkPrefix: checkPrefix,\n  checkHyphen: checkHyphen,\n  checkYear: checkYear\n};\nvar third = {\n  checkAcronym: checkAcronym,\n  neighbours: neighbours,\n  orgWords: orgWords,\n  nounFallback: nounFallback,\n  variables: variables\n}; //\n// these methods don't care about word-neighbours\n\nvar secondPass = function secondPass(terms, model, world) {\n  for (var i = 0; i < terms.length; i += 1) {\n    // mark Noun|Verb on term metadata\n    second.tagSwitch(terms, i, model); //  is it titlecased?\n\n    second.checkCase(terms, i, model); // look at word ending\n\n    second.checkSuffix(terms, i, model); // try look-like rules\n\n    second.checkRegex(terms, i, model, world); // check for recognized prefix, like 'micro-'\n\n    second.checkPrefix(terms, i, model); // turn '1993' into a year\n\n    second.checkYear(terms, i, model);\n  }\n};\n\nvar thirdPass = function thirdPass(terms, model, world) {\n  for (var i = 0; i < terms.length; i += 1) {\n    // let these tags get layered\n    var found = third.checkAcronym(terms, i, model); // deduce parent tags\n\n    fillTags(terms, i, model); // look left+right for hints\n\n    found = found || third.neighbours(terms, i, model); //  ¯\\_(ツ)_/¯ - found nothing\n\n    found = found || third.nounFallback(terms, i, model);\n  }\n\n  for (var _i = 0; _i < terms.length; _i += 1) {\n    // Johnson LLC\n    third.orgWords(terms, _i, world); // support 'out-lived'\n\n    second.checkHyphen(terms, _i, model); // verb-noun disambiguation, etc\n\n    third.variables(terms, _i, world);\n  }\n};\n\nvar preTagger = function preTagger(view) {\n  var methods = view.methods,\n      model = view.model,\n      world = view.world; // assign known-words\n  // view.compute('lexicon')\n  // roughly split sentences up by clause\n\n  var document = methods.two.quickSplit(view.docs); // start with all terms\n\n  for (var n = 0; n < document.length; n += 1) {\n    var terms = document[n]; // firstPass(terms, model)\n    // guess by the letters\n\n    secondPass(terms, model, world); // guess by the neighbours\n\n    thirdPass(terms, model, world);\n  } // leave a nice cache for the next people\n\n\n  view.compute('cache');\n  return document;\n};\n\nexport default preTagger;","map":null,"metadata":{},"sourceType":"module"}