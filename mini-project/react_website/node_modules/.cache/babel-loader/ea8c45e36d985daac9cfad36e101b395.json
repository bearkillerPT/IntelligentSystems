{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar max = 6;\n\nvar getSuffixes = function getSuffixes() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var list = [];\n\n  for (var i = max; i >= 0; i -= 1) {\n    if (str.length - 1 <= i) {\n      continue;\n    }\n\n    var n = str.length - i - 1;\n    var suffix = str.substring(n, n + str.length - 1);\n    list.push(suffix);\n  }\n\n  return list.reverse();\n};\n\nvar getDiff = function getDiff(left, right, suff) {\n  suff = suff.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n\n  var reg = new RegExp(suff + '$');\n  var stem = left.replace(reg, '');\n\n  if (!right.startsWith(stem)) {\n    return;\n  }\n\n  stem = stem.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  var start = new RegExp('^' + stem);\n  var rest = right.replace(start, '');\n  return {\n    from: suff,\n    to: rest,\n    id: suff + '|' + rest,\n    reg: reg\n  };\n};\n\nvar unique = function unique(arr) {\n  var set = new Set();\n  return arr.filter(function (a) {\n    if (set.has(a.id)) {\n      return false;\n    }\n\n    set.add(a.id);\n    return true;\n  });\n};\n\nvar getAll = function getAll(arr) {\n  var res = [];\n  arr.forEach(function (a) {\n    var _a = _slicedToArray(a, 2),\n        left = _a[0],\n        right = _a[1];\n\n    var list = getSuffixes(left);\n    list.forEach(function (suff) {\n      var diff = getDiff(left, right, suff);\n\n      if (diff) {\n        res.push(diff);\n      }\n    });\n  });\n  res = unique(res);\n  return res;\n};\n\nexport default getAll; // console.log(getAll([['laughed', 'laughing']]))","map":null,"metadata":{},"sourceType":"module"}