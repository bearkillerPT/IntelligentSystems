{"ast":null,"code":"import grad from 'grad-school';\nimport fmt from './02-fmt.js';\nimport validate from './01-validate.js'; // 'fill-down' parent logic inference\n\nvar compute = function compute(allTags) {\n  // setup graph-lib format\n  var flatList = Object.keys(allTags).map(function (k) {\n    var o = allTags[k];\n    var props = {\n      not: new Set(o.not),\n      also: o.also,\n      is: o.is,\n      novel: o.novel\n    };\n    return {\n      id: k,\n      parent: o.is,\n      props: props,\n      children: []\n    };\n  });\n  var graph = grad(flatList).cache().fillDown();\n  return graph.out('array');\n};\n\nvar fromUser = function fromUser(tags) {\n  Object.keys(tags).forEach(function (k) {\n    tags[k] = Object.assign({}, tags[k]);\n    tags[k].novel = true;\n  });\n  return tags;\n};\n\nvar addTags = function addTags(tags, already) {\n  // are these tags internal ones, or user-generated?\n  if (Object.keys(already).length > 0) {\n    tags = fromUser(tags);\n  }\n\n  tags = validate(tags, already);\n  var allTags = Object.assign({}, already, tags); // do some basic setting-up\n  // 'fill-down' parent logic\n\n  var nodes = compute(allTags); // convert it to our final format\n\n  var res = fmt(nodes);\n  return res;\n};\n\nexport default addTags;","map":null,"metadata":{},"sourceType":"module"}