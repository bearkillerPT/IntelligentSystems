{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n// transformations to make on our lexicon\nexport default {\n  // add plural forms of singular nouns\n  Singular: function Singular(word, lex, methods, model) {\n    var already = model.one.lexicon;\n    var plural = methods.two.transform.nounToPlural(word, model);\n\n    if (!already[plural]) {\n      lex[plural] = lex[plural] || 'Plural';\n    }\n  },\n  // superlative/ comparative forms for adjectives\n  Comparable: function Comparable(word, lex, methods, model) {\n    var already = model.one.lexicon; // fast -> fastest\n\n    var sup = methods.two.transform.adjToSuperlative(word, model);\n\n    if (!already[sup]) {\n      lex[sup] = lex[sup] || 'Superlative';\n    } // fast -> faster\n\n\n    var comp = methods.two.transform.adjToComparative(word, model);\n\n    if (!already[comp]) {\n      lex[comp] = lex[comp] || 'Comparative';\n    } // overwrite\n\n\n    lex[word] = 'Adjective';\n  },\n  // 'german' -> 'germans'\n  Demonym: function Demonym(word, lex, methods, model) {\n    var plural = methods.two.transform.nounToPlural(word, model);\n    lex[plural] = lex[plural] || ['Demonym', 'Plural'];\n  },\n  // conjugate all forms of these verbs\n  Infinitive: function Infinitive(word, lex, methods, model) {\n    var already = model.one.lexicon;\n    var all = methods.two.transform.verbConjugate(word, model);\n    Object.entries(all).forEach(function (a) {\n      if (!already[a[1]] && !lex[a[1]]) {\n        lex[a[1]] = a[0];\n      }\n    });\n  },\n  // 'walk up' should conjugate, too\n  PhrasalVerb: function PhrasalVerb(word, lex, methods, model) {\n    var already = model.one.lexicon;\n    lex[word] = ['PhrasalVerb', 'Infinitive'];\n    var _multi = model.one._multiCache;\n\n    var _word$split = word.split(' '),\n        _word$split2 = _slicedToArray(_word$split, 2),\n        inf = _word$split2[0],\n        rest = _word$split2[1]; // add root verb\n\n\n    if (!already[inf]) {\n      lex[inf] = lex[inf] || 'Infinitive';\n    } // conjugate it\n\n\n    var all = methods.two.transform.verbConjugate(inf, model);\n    Object.entries(all).forEach(function (a) {\n      // not 'walker up', or 'had taken up'\n      if (a[0] === 'Actor' || a[1] === '') {\n        return;\n      } // add the root verb, alone\n\n\n      if (!lex[a[1]] && !already[a[1]]) {\n        lex[a[1]] = a[0];\n      }\n\n      _multi[a[1]] = true;\n      var str = a[1] + ' ' + rest;\n      lex[str] = lex[str] || [a[0], 'PhrasalVerb'];\n    });\n  },\n  // expand 'million'\n  Multiple: function Multiple(word, lex) {\n    lex[word] = ['Multiple', 'Cardinal']; // 'millionth'\n\n    lex[word + 'th'] = ['Multiple', 'Ordinal']; // 'millionths'\n\n    lex[word + 'ths'] = ['Multiple', 'Fraction'];\n  },\n  // expand number-words\n  Cardinal: function Cardinal(word, lex) {\n    lex[word] = ['TextValue', 'Cardinal'];\n  },\n  // 'millionth'\n  Ordinal: function Ordinal(word, lex) {\n    lex[word] = ['TextValue', 'Ordinal'];\n    lex[word + 's'] = ['TextValue', 'Fraction'];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}