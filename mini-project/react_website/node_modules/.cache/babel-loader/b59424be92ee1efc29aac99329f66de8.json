{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n// transfer sentence-ending punctuation\nvar repairPunct = function repairPunct(terms, len) {\n  var last = terms.length - 1;\n  var from = terms[last];\n  var to = terms[last - len];\n\n  if (to && from) {\n    to.post += from.post; //this isn't perfect.\n\n    to.post = to.post.replace(/ +([.?!,;:])/, '$1'); // don't allow any silly punctuation outcomes like ',!'\n\n    to.post = to.post.replace(/[,;:]+([.?!])/, '$1');\n  }\n}; // remove terms from document json\n\n\nvar pluckOut = function pluckOut(document, nots) {\n  nots.forEach(function (ptr) {\n    var _ptr = _slicedToArray(ptr, 3),\n        n = _ptr[0],\n        start = _ptr[1],\n        end = _ptr[2];\n\n    var len = end - start;\n\n    if (!document[n]) {\n      return; // weird!\n    }\n\n    if (end === document[n].length && end > 1) {\n      repairPunct(document[n], len);\n    }\n\n    document[n].splice(start, len); // replaces len terms at index start\n  }); // remove any now-empty sentences\n  // (foreach + splice = 'mutable filter')\n\n  for (var i = document.length - 1; i >= 0; i -= 1) {\n    if (document[i].length === 0) {\n      document.splice(i, 1); // remove any trailing whitespace before our removed sentence\n\n      if (i === document.length && document[i - 1]) {\n        var terms = document[i - 1];\n        var lastTerm = terms[terms.length - 1];\n\n        if (lastTerm) {\n          lastTerm.post = lastTerm.post.trimEnd();\n        }\n      } // repair any downstream indexes\n      // for (let k = i; k < document.length; k += 1) {\n      //   document[k].forEach(term => term.index[0] -= 1)\n      // }\n\n    }\n  }\n\n  return document;\n};\n\nexport default pluckOut;","map":null,"metadata":{},"sourceType":"module"}