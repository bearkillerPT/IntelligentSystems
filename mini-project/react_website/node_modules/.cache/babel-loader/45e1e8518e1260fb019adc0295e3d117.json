{"ast":null,"code":"var isClass = /^\\../;\nvar isId = /^#./;\n\nvar escapeXml = function escapeXml(str) {\n  str = str.replace(/&/g, '&amp;');\n  str = str.replace(/</g, '&lt;');\n  str = str.replace(/>/g, '&gt;');\n  str = str.replace(/\"/g, '&quot;');\n  str = str.replace(/'/g, '&apos;');\n  return str;\n}; // interpret .class, #id, tagName\n\n\nvar toTag = function toTag(k) {\n  var start = '';\n  var end = '</span>';\n  k = escapeXml(k);\n\n  if (isClass.test(k)) {\n    start = \"<span class=\\\"\".concat(k.replace(/^\\./, ''), \"\\\"\");\n  } else if (isId.test(k)) {\n    start = \"<span id=\\\"\".concat(k.replace(/^#/, ''), \"\\\"\");\n  } else {\n    start = \"<\".concat(k);\n    end = \"</\".concat(k, \">\");\n  }\n\n  start += '>';\n  return {\n    start: start,\n    end: end\n  };\n};\n\nvar getIndex = function getIndex(doc, obj) {\n  var starts = {};\n  var ends = {};\n  Object.keys(obj).forEach(function (k) {\n    var res = obj[k];\n    var tag = toTag(k);\n\n    if (typeof res === 'string') {\n      res = doc.match(res);\n    }\n\n    res.docs.forEach(function (terms) {\n      // don't highlight implicit terms\n      if (terms.every(function (t) {\n        return t.implicit;\n      })) {\n        return;\n      }\n\n      var a = terms[0].id;\n      starts[a] = starts[a] || [];\n      starts[a].push(tag.start);\n      var b = terms[terms.length - 1].id;\n      ends[b] = ends[b] || [];\n      ends[b].push(tag.end);\n    });\n  });\n  return {\n    starts: starts,\n    ends: ends\n  };\n};\n\nvar html = function html(obj) {\n  // index ids to highlight\n  var _getIndex = getIndex(this, obj),\n      starts = _getIndex.starts,\n      ends = _getIndex.ends; // create the text output\n\n\n  var out = '';\n  this.docs.forEach(function (terms) {\n    for (var i = 0; i < terms.length; i += 1) {\n      var t = terms[i]; // do a span tag\n\n      if (starts.hasOwnProperty(t.id)) {\n        out += starts[t.id].join('');\n      }\n\n      out += t.pre || '' + t.text || '';\n\n      if (ends.hasOwnProperty(t.id)) {\n        out += ends[t.id].join('');\n      }\n\n      out += t.post || '';\n    }\n  });\n  return out;\n};\n\nexport default {\n  html: html\n};","map":null,"metadata":{},"sourceType":"module"}