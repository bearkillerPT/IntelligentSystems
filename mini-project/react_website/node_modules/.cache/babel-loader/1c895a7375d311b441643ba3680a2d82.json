{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport getUnion from './lib/union.js';\nimport getDifference from './lib/difference.js';\nimport getIntersection from './lib/intersection.js';\n\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n};\n\nvar getDoc = function getDoc(m, view) {\n  if (typeof m === 'string' || isArray(m)) {\n    return view.match(m);\n  }\n\n  if (!m) {\n    return view.none();\n  } // support pre-parsed reg object\n\n\n  return m;\n}; // 'harden' our json pointers, again\n\n\nvar addIds = function addIds(ptrs, docs) {\n  return ptrs.map(function (ptr) {\n    var _ptr = _slicedToArray(ptr, 2),\n        n = _ptr[0],\n        start = _ptr[1];\n\n    if (docs[n] && docs[n][start]) {\n      ptr[3] = docs[n][start].id;\n    }\n\n    return ptr;\n  });\n};\n\nvar methods = {}; // all parts, minus duplicates\n\nmethods.union = function (m) {\n  m = getDoc(m, this);\n  var ptrs = getUnion(this.fullPointer, m.fullPointer);\n  ptrs = addIds(ptrs, this.document);\n  return this.toView(ptrs);\n};\n\nmethods.and = methods.union; // only parts they both have\n\nmethods.intersection = function (m) {\n  m = getDoc(m, this);\n  var ptrs = getIntersection(this.fullPointer, m.fullPointer);\n  ptrs = addIds(ptrs, this.document);\n  return this.toView(ptrs);\n}; // only parts of a that b does not have\n\n\nmethods.not = function (m) {\n  m = getDoc(m, this);\n  var ptrs = getDifference(this.fullPointer, m.fullPointer);\n  ptrs = addIds(ptrs, this.document);\n  return this.toView(ptrs);\n};\n\nmethods.difference = methods.not; // get opposite of a\n\nmethods.complement = function () {\n  var doc = this.all();\n  var ptrs = getDifference(doc.fullPointer, this.fullPointer);\n  ptrs = addIds(ptrs, this.document);\n  return this.toView(ptrs);\n}; // remove overlaps\n\n\nmethods.settle = function () {\n  var ptrs = this.fullPointer;\n  ptrs.forEach(function (ptr) {\n    ptrs = getUnion(ptrs, [ptr]);\n  });\n  ptrs = addIds(ptrs, this.document);\n  return this.update(ptrs);\n};\n\nvar addAPI = function addAPI(View) {\n  // add set/intersection/union\n  Object.assign(View.prototype, methods);\n};\n\nexport default addAPI;","map":null,"metadata":{},"sourceType":"module"}