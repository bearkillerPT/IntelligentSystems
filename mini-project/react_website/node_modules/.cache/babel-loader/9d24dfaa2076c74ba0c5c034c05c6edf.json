{"ast":null,"code":"var utils = {\n  /** */\n  termList: function termList() {\n    return this.methods.one.termList(this.docs);\n  },\n\n  /** return individual terms*/\n  terms: function terms(n) {\n    var m = this.match('.'); // this is a bit faster than .match('.') \n    // let ptrs = []\n    // this.docs.forEach((terms) => {\n    //   terms.forEach((term) => {\n    //     let [y, x] = term.index || []\n    //     ptrs.push([y, x, x + 1])\n    //   })\n    // })\n    // let m = this.update(ptrs)\n\n    return typeof n === 'number' ? m.eq(n) : m;\n  },\n\n  /** */\n  groups: function groups(group) {\n    var _this = this;\n\n    if (group || group === 0) {\n      return this.update(this._groups[group] || []);\n    } // return an object of Views\n\n\n    var res = {};\n    Object.keys(this._groups).forEach(function (k) {\n      res[k] = _this.update(_this._groups[k]);\n    }); // this._groups = null\n\n    return res;\n  },\n\n  /** */\n  eq: function eq(n) {\n    var ptr = this.pointer;\n    var cache = this._cache || [];\n\n    if (!ptr) {\n      ptr = this.docs.map(function (_doc, i) {\n        return [i];\n      });\n    }\n\n    if (ptr[n]) {\n      var view = this.update([ptr[n]]);\n      view._cache = cache[n];\n      return view;\n    }\n\n    return this.none();\n  },\n\n  /** */\n  first: function first() {\n    return this.eq(0);\n  },\n\n  /** */\n  last: function last() {\n    var n = this.fullPointer.length - 1;\n    return this.eq(n);\n  },\n\n  /** grab term[0] for every match */\n  firstTerms: function firstTerms() {\n    return this.match('^.');\n  },\n\n  /** grab the last term for every match  */\n  lastTerms: function lastTerms() {\n    return this.match('.$');\n  },\n\n  /** */\n  slice: function slice(min, max) {\n    var pntrs = this.pointer || this.docs.map(function (_o, n) {\n      return [n];\n    });\n    pntrs = pntrs.slice(min, max);\n    return this.update(pntrs);\n  },\n\n  /** return a view of the entire document */\n  all: function all() {\n    return this.update().toView();\n  },\n\n  /**  */\n  fullSentences: function fullSentences() {\n    var ptrs = this.fullPointer.map(function (a) {\n      return [a[0]];\n    }); //lazy!\n\n    return this.update(ptrs).toView();\n  },\n\n  /** return a view of no parts of the document */\n  none: function none() {\n    return this.update([]);\n  },\n\n  /** are these two views looking at the same words? */\n  isDoc: function isDoc(b) {\n    if (!b || !b.isView) {\n      return false;\n    }\n\n    var aPtr = this.fullPointer;\n    var bPtr = b.fullPointer;\n\n    if (!aPtr.length === bPtr.length) {\n      return false;\n    } // ensure pointers are the same\n\n\n    return aPtr.every(function (ptr, i) {\n      if (!bPtr[i]) {\n        return false;\n      } // ensure [n, start, end] are all the same\n\n\n      return ptr[0] === bPtr[i][0] && ptr[1] === bPtr[i][1] && ptr[2] === bPtr[i][2];\n    });\n  },\n\n  /** how many seperate terms does the document have? */\n  wordCount: function wordCount() {\n    return this.docs.reduce(function (count, terms) {\n      count += terms.filter(function (t) {\n        return t.text !== '';\n      }).length;\n      return count;\n    }, 0);\n  }\n};\nutils.group = utils.groups;\nutils.fullSentence = utils.fullSentences;\nutils.sentence = utils.fullSentences;\nutils.lastTerm = utils.lastTerms;\nutils.firstTerm = utils.firstTerms;\nexport default utils;","map":null,"metadata":{},"sourceType":"module"}