{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n// import { toPast, toPresent, toGerund, toParticiple } from '../../../../model/models/index.js'\nimport { convert } from 'suffix-thumb'; // pull-apart phrasal verb 'fall over'\n\nvar parse = function parse(inf) {\n  if (/ /.test(inf)) {\n    return inf.split(/ /);\n  }\n\n  return [inf, ''];\n}; //we run this on every verb in the lexicon, so please keep it fast\n//we assume the input word is a proper infinitive\n\n\nvar conjugate = function conjugate(inf, model) {\n  var _model$two$models = model.two.models,\n      toPast = _model$two$models.toPast,\n      toPresent = _model$two$models.toPresent,\n      toGerund = _model$two$models.toGerund,\n      toParticiple = _model$two$models.toParticiple; // ad-hoc Copula response\n\n  if (inf === 'be') {\n    return {\n      Infinitive: inf,\n      Gerund: 'being',\n      PastTense: 'was',\n      PresentTense: 'is'\n    };\n  }\n\n  var _parse = parse(inf),\n      _parse2 = _slicedToArray(_parse, 2),\n      str = _parse2[0],\n      particle = _parse2[1];\n\n  var found = {\n    Infinitive: inf,\n    PastTense: convert(str, toPast),\n    PresentTense: convert(str, toPresent),\n    Gerund: convert(str, toGerund),\n    FutureTense: 'will ' + inf\n  }; // add past-participle if it's interesting\n  // drive -> driven (not drove)\n\n  var pastPrt = convert(str, toParticiple);\n\n  if (pastPrt !== inf && pastPrt !== found.PastTense) {\n    found.Participle = pastPrt;\n  } // put phrasal-verbs back together again\n\n\n  if (particle) {\n    Object.keys(found).forEach(function (k) {\n      found[k] += ' ' + particle;\n    });\n  }\n\n  return found;\n};\n\nexport default conjugate; // console.log(toPresent.rules.y)\n// console.log(convert('buy', toPresent))","map":null,"metadata":{},"sourceType":"module"}