{"ast":null,"code":"var present = {\n  tense: 'PresentTense'\n};\nvar conditional = {\n  conditional: true\n};\nvar future = {\n  tense: 'FutureTense'\n};\nvar prog = {\n  progressive: true\n};\nvar past = {\n  tense: 'PastTense'\n};\nvar complete = {\n  complete: true,\n  progressive: false\n};\nvar passive = {\n  passive: true\n};\nvar plural = {\n  plural: true\n};\nvar singular = {\n  plural: false\n};\n\nvar getData = function getData(tags) {\n  var data = {};\n  tags.forEach(function (o) {\n    Object.assign(data, o);\n  });\n  return data;\n};\n\nvar verbForms = {\n  // === Simple ===\n  'imperative': [// walk!\n  ['#Imperative', []]],\n  'want-infinitive': [['^(want|wants|wanted) to #Infinitive$', [present]], ['^wanted to #Infinitive$', [past]], ['^will want to #Infinitive$', [future]]],\n  'gerund-phrase': [// started looking\n  ['^#PastTense #Gerund$', [past]], // starts looking\n  ['^#PresentTense #Gerund$', [present]], // start looking\n  ['^#Infinitive #Gerund$', [present]], // will start looking\n  ['^will #Infinitive #Gerund$', [future]], // have started looking\n  ['^have #PastTense #Gerund$', [past]], // will have started looking\n  ['^will have #PastTense #Gerund$', [past]]],\n  'simple-present': [// he walks',\n  ['^#PresentTense$', [present]], // we walk\n  ['^#Infinitive$', [present]]],\n  'simple-past': [// he walked',\n  ['^#PastTense$', [past]]],\n  'simple-future': [// he will walk\n  ['^will #Adverb? #Infinitive', [future]]],\n  // === Progressive ===\n  'present-progressive': [// he is walking\n  ['^(is|are|am) #Gerund$', [present, prog]]],\n  'past-progressive': [// he was walking\n  ['^(was|were) #Gerund$', [past, prog]]],\n  'future-progressive': [// he will be\n  ['^will be #Gerund$', [future, prog]]],\n  // === Perfect ===\n  'present-perfect': [// he has walked\n  ['^(has|have) #PastTense$', [past, complete]] //past?\n  ],\n  'past-perfect': [// he had walked\n  ['^had #PastTense$', [past, complete]], // had been to see\n  ['^had #PastTense to #Infinitive', [past, complete]]],\n  'future-perfect': [// he will have\n  ['^will have #PastTense$', [future, complete]]],\n  // === Progressive-perfect ===\n  'present-perfect-progressive': [// he has been walking\n  ['^(has|have) been #Gerund$', [past, prog]] //present?\n  ],\n  'past-perfect-progressive': [// he had been\n  ['^had been #Gerund$', [past, prog]]],\n  'future-perfect-progressive': [// will have been\n  ['^will have been #Gerund$', [future, prog]]],\n  // ==== Passive ===\n  'passive-past': [// got walked, was walked, were walked\n  ['(got|were|was) (#PastTense|#Participle)', [past, passive]], // was being walked\n  ['^(was|were) being (#PastTense|#Participle)', [past, passive]], // had been walked, have been eaten\n  ['^(had|have) been (#PastTense|#Participle)', [past, passive]]],\n  'passive-present': [// is walked, are stolen\n  ['^(is|are|am) (#PastTense|#Participle)', [present, passive]], // is being walked\n  ['^(is|are|am) being (#PastTense|#Participle)', [present, passive]], // has been cleaned\n  ['^has been (#PastTense|#Participle)', [present, passive]]],\n  'passive-future': [// will have been walked\n  ['will have been (#PastTense|#Participle)', [future, passive, conditional]], // will be cleaned\n  ['will be being? (#PastTense|#Participle)', [future, passive, conditional]]],\n  // === Conditional ===\n  'present-conditional': [// would be walked\n  ['would be #PastTense', [present, conditional]]],\n  'past-conditional': [// would have been walked\n  ['would have been #PastTense', [past, conditional]]],\n  // ==== Auxiliary ===\n  'auxiliary-future': [// going to drink\n  ['(is|are|am|was) going to (#Infinitive|#PresentTense)', [future]]],\n  'auxiliary-past': [// he did walk\n  ['^did #Infinitive$', [past, singular]], // used to walk\n  ['^used to #Infinitive$', [past, complete]]],\n  'auxiliary-present': [// we do walk\n  ['^(does|do) #Infinitive$', [present, complete, plural]]],\n  // === modals ===\n  'modal-past': [// he could have walked\n  ['^(could|must|should|shall) have #PastTense$', [past]]],\n  'modal-infinitive': [// he can walk\n  ['^#Modal #Infinitive$', []]],\n  'infinitive': [// walk\n  ['^#Infinitive$', []]]\n};\nvar list = [];\nObject.keys(verbForms).map(function (k) {\n  verbForms[k].forEach(function (a) {\n    list.push({\n      name: k,\n      match: a[0],\n      data: getData(a[1])\n    });\n  });\n});\nexport default list;","map":null,"metadata":{},"sourceType":"module"}