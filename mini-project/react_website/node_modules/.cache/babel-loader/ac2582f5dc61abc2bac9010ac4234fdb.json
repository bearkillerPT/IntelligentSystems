{"ast":null,"code":"var toRoot = {\n  // 'spencer's' -> 'spencer'\n  'Possessive': function Possessive(term) {\n    var str = term.machine || term.normal || term.text;\n    str = str.replace(/'s$/, '');\n    return str;\n  },\n  // 'drinks' -> 'drink'\n  'Plural': function Plural(term, world) {\n    var str = term.machine || term.normal || term.text;\n    return world.methods.two.transform.nounToSingular(str, world.model);\n  },\n  // ''\n  'Copula': function Copula() {\n    return 'is';\n  },\n  // 'walked' -> 'walk'\n  'PastTense': function PastTense(term, world) {\n    var str = term.machine || term.normal || term.text;\n    return world.methods.two.transform.verbToInfinitive(str, world.model, 'PastTense');\n  },\n  // 'walking' -> 'walk'\n  'Gerund': function Gerund(term, world) {\n    var str = term.machine || term.normal || term.text;\n    return world.methods.two.transform.verbToInfinitive(str, world.model, 'Gerund');\n  },\n  // 'walks' -> 'walk'\n  'PresentTense': function PresentTense(term, world) {\n    var str = term.machine || term.normal || term.text;\n\n    if (term.tags.has('Infinitive')) {\n      return str;\n    }\n\n    return world.methods.two.transform.verbToInfinitive(str, world.model, 'PresentTense');\n  },\n  // 'quieter' -> 'quiet'\n  'Comparative': function Comparative(term, world) {\n    var str = term.machine || term.normal || term.text;\n    return world.methods.two.transform.adjFromComparative(str, world.model);\n  },\n  // 'quietest' -> 'quiet'\n  'Superlative': function Superlative(term, world) {\n    var str = term.machine || term.normal || term.text;\n    return world.methods.two.transform.adjFromSuperlative(str, world.model);\n  },\n  // 'suddenly' -> 'sudden'\n  'Adverb': function Adverb(term, world) {\n    var toAdj = world.methods.two.transform.advToAdjective;\n    var str = term.machine || term.normal || term.text;\n    return toAdj(str);\n  }\n};\n\nvar getRoot = function getRoot(view) {\n  var world = view.world;\n  var keys = Object.keys(toRoot);\n  view.docs.forEach(function (terms) {\n    for (var i = 0; i < terms.length; i += 1) {\n      var term = terms[i];\n\n      for (var k = 0; k < keys.length; k += 1) {\n        if (term.tags.has(keys[k])) {\n          var fn = toRoot[keys[k]];\n          var root = fn(term, world);\n\n          if (term.normal !== root) {\n            term.root = root;\n          }\n\n          break;\n        }\n      }\n    }\n  });\n};\n\nexport default getRoot;","map":null,"metadata":{},"sourceType":"module"}