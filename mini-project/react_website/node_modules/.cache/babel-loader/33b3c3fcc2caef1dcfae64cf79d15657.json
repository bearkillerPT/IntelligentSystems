{"ast":null,"code":"var api = function api(View) {\n  /** speedy match a sequence of matches */\n  View.prototype.sweep = function (net) {\n    var _this = this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var world = this.world,\n        docs = this.docs;\n    var methods = world.methods;\n    var found = methods.one.bulkMatch(docs, net, this.methods, opts); // apply any changes\n\n    if (opts.tagger !== false) {\n      methods.one.bulkTagger(found, docs, this.world);\n    } // fix the pointers\n    // collect all found results into a View\n\n\n    found = found.map(function (o) {\n      var ptr = o.pointer;\n      var term = docs[ptr[0]][ptr[1]];\n      var len = ptr[2] - ptr[1];\n\n      if (term.index) {\n        o.pointer = [term.index[0], term.index[1], ptr[1] + len];\n      }\n\n      return o;\n    });\n    var ptrs = found.map(function (o) {\n      return o.pointer;\n    }); // cleanup results a bit\n\n    found = found.map(function (obj) {\n      obj.view = _this.update([obj.pointer]);\n      delete obj.regs;\n      delete obj.needs;\n      delete obj.pointer;\n      delete obj._expanded;\n      return obj;\n    });\n    return {\n      view: this.update(ptrs),\n      found: found\n    };\n  };\n};\n\nexport default api;","map":null,"metadata":{},"sourceType":"module"}