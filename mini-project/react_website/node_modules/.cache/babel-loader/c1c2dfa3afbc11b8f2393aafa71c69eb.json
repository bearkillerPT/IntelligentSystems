{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar anyIntersection = function anyIntersection(setA, setB) {\n  var _iterator = _createForOfIteratorHelper(setB),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var elem = _step.value;\n\n      if (setA.has(elem)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}; // check words/tags against our cache\n\n\nvar failFast = function failFast(regs, cache) {\n  for (var i = 0; i < regs.length; i += 1) {\n    var reg = regs[i];\n\n    if (reg.optional === true || reg.negative === true || reg.fuzzy === true) {\n      continue;\n    } // is the word missing from the cache?\n\n\n    if (reg.word !== undefined && cache.has(reg.word) === false) {\n      return true;\n    } // is the tag missing?\n\n\n    if (reg.tag !== undefined && cache.has('#' + reg.tag) === false) {\n      return true;\n    } // perform a speedup for fast-or\n\n\n    if (reg.fastOr && anyIntersection(reg.fastOr, cache) === false) {\n      return false;\n    }\n  }\n\n  return false;\n};\n\nexport default failFast;","map":null,"metadata":{},"sourceType":"module"}