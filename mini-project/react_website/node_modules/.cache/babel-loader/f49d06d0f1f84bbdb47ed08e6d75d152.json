{"ast":null,"code":"var prefix = /^.([0-9]+)/; // handle compressed form of key-value pair\n\nvar getKeyVal = function getKeyVal(word, model) {\n  var val = model.exceptions[word];\n  var m = val.match(prefix);\n\n  if (m === null) {\n    // return not compressed form\n    return model.exceptions[word];\n  } // uncompress it\n\n\n  var num = Number(m[1]) || 0;\n  var pre = word.substr(0, num);\n  return pre + val.replace(prefix, '');\n}; // get suffix-rules according to last char of word\n\n\nvar getRules = function getRules(word) {\n  var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var char = word[word.length - 1];\n  var list = rules[char] || []; // do we have a generic suffix?\n\n  if (rules['']) {\n    list = list.concat(rules['']);\n  }\n\n  return list;\n};\n\nvar convert = function convert(word, model, debug) {\n  // check list of irregulars\n  if (model.exceptions.hasOwnProperty(word)) {\n    if (debug) {\n      console.log(\"exception, \", word, model.exceptions[word]);\n    }\n\n    return getKeyVal(word, model);\n  } // if model is reversed, try rev rules\n\n\n  var rules = model.rules;\n\n  if (model.reversed) {\n    rules = model.rev;\n  } // try suffix rules\n\n\n  rules = getRules(word, rules);\n\n  for (var i = 0; i < rules.length; i += 1) {\n    var suffix = rules[i][0];\n\n    if (word.endsWith(suffix)) {\n      if (debug) {\n        console.log(\"rule, \", rules[i]);\n      }\n\n      var reg = new RegExp(suffix + '$');\n      return word.replace(reg, rules[i][1]);\n    }\n  }\n\n  if (debug) {\n    console.log(' x - ' + word);\n  } // return the original word unchanged\n\n\n  return word;\n};\n\nexport default convert;","map":null,"metadata":{},"sourceType":"module"}