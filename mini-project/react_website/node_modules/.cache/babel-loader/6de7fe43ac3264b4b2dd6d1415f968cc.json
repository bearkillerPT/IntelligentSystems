{"ast":null,"code":"import doRules from './lib.js';\nvar suffixes = [null, {\n  'y': 'iness'\n}, {\n  'le': 'ility',\n  'al': 'ality',\n  'ay': 'ayness'\n}, {\n  'ial': 'y',\n  'ing': 'ment',\n  'ess': 'essness',\n  'ous': 'ousness',\n  'ive': 'ivity',\n  'ect': 'ection'\n}, {\n  'ting': 'ting',\n  'ring': 'ring',\n  'cial': 'ciality',\n  'nate': 'nation',\n  'rate': 'ration',\n  'bing': 'bingness',\n  'atic': 'acy',\n  //democratic\n  'sing': 'se',\n  'iful': 'y',\n  //beautify, merciful\n  'ible': 'ibility' //credible\n\n}, {\n  'erate': 'eration'\n}, {\n  'ionate': 'ion'\n}];\nvar exceptions = {\n  clean: 'cleanliness',\n  naive: 'naivety',\n  dramatic: 'drama',\n  ironic: 'irony',\n  deep: 'depth',\n  automatic: 'automation',\n  simple: 'simplicity',\n  boring: 'boredom',\n  free: 'freedom',\n  wise: 'wisdom',\n  fortunate: 'fortune',\n  gentle: 'gentleness',\n  quiet: 'quiet',\n  expensive: 'expense',\n  offensive: 'offence'\n};\nvar dontDo = new Set(['terrible', 'annoying']); // a lot of adjectives *don't really* have a noun-form\n// 'broken' -> 'brokeness'?\n// 'surreal' -> 'surrealness'?\n// but here, conjugate what it would be, if it made sense to\n\nvar toNoun = function toNoun(str) {\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str];\n  }\n\n  if (dontDo.has(str)) {\n    return null;\n  }\n\n  var res = doRules(str, suffixes);\n\n  if (res) {\n    return res;\n  }\n\n  return str + 'ness';\n};\n\nexport default toNoun; // console.log(toNoun('clever'))","map":null,"metadata":{},"sourceType":"module"}