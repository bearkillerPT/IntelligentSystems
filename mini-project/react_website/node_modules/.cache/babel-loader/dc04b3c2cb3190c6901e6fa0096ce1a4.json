{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { spliceArr } from './lib/insert.js';\n\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}; // append a new document, somehow\n\n\nvar combineDocs = function combineDocs(homeDocs, inputDocs) {\n  // add a space\n  var end = homeDocs[homeDocs.length - 1];\n  var last = end[end.length - 1];\n\n  if (/ /.test(last.post) === false) {\n    last.post += ' ';\n  }\n\n  homeDocs = homeDocs.concat(inputDocs);\n  return homeDocs;\n};\n\nvar combineViews = function combineViews(home, input) {\n  // is it a view from the same document?\n  if (home.document === input.document) {\n    var _ptrs = home.fullPointer.concat(input.fullPointer);\n\n    return home.toView(_ptrs).compute('index');\n  } // update n of new pointer, to end of our pointer\n\n\n  var ptrs = input.fullPointer;\n  ptrs.forEach(function (a) {\n    a[0] += home.document.length;\n  });\n  home.document = combineDocs(home.document, input.document);\n  return home.all();\n};\n\nexport default {\n  // add string as new match/sentence\n  concat: function concat(input) {\n    var methods = this.methods,\n        document = this.document,\n        world = this.world; // parse and splice-in new terms\n\n    if (typeof input === 'string') {\n      var json = methods.one.tokenize.fromString(input, world);\n      var ptrs = this.fullPointer;\n      var lastN = ptrs[ptrs.length - 1][0];\n      spliceArr(document, lastN + 1, json);\n      return this.compute('index');\n    } // plop some view objects together\n\n\n    if (_typeof(input) === 'object' && input.isView) {\n      return combineViews(this, input);\n    } // assume it's an array of terms\n\n\n    if (isArray(input)) {\n      var docs = combineDocs(this.document, input);\n      this.document = docs;\n      return this.all();\n    }\n\n    return this;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}