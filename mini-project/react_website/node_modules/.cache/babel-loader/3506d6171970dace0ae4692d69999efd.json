{"ast":null,"code":"// edited by Spencer Kelly\n// credit to https://github.com/BrunoRB/ahocorasick by Bruno Roberto BÃºrigo.\nvar tokenize = function tokenize(phrase, world) {\n  var methods = world.methods,\n      model = world.model;\n  var terms = methods.one.tokenize.splitTerms(phrase, model).map(methods.one.tokenize.splitWhitespace);\n  return terms.map(function (term) {\n    return term.text.toLowerCase();\n  });\n}; // turn an array or object into a compressed aho-corasick structure\n\n\nvar buildTrie = function buildTrie(phrases, world) {\n  // const tokenize=methods.one.\n  var goNext = [{}];\n  var endAs = [null];\n  var failTo = [0];\n  var xs = [];\n  var n = 0;\n  phrases.forEach(function (phrase) {\n    var curr = 0; // let wordsB = phrase.split(/ /g).filter(w => w)\n\n    var words = tokenize(phrase, world);\n\n    for (var i = 0; i < words.length; i++) {\n      var word = words[i];\n\n      if (goNext[curr] && goNext[curr].hasOwnProperty(word)) {\n        curr = goNext[curr][word];\n      } else {\n        n++;\n        goNext[curr][word] = n;\n        goNext[n] = {};\n        curr = n;\n        endAs[n] = null;\n      }\n    }\n\n    endAs[curr] = [words.length];\n  }); // f(s) = 0 for all states of depth 1 (the ones from which the 0 state can transition to)\n\n  for (var word in goNext[0]) {\n    n = goNext[0][word];\n    failTo[n] = 0;\n    xs.push(n);\n  }\n\n  while (xs.length) {\n    var r = xs.shift(); // for each symbol a such that g(r, a) = s\n\n    var keys = Object.keys(goNext[r]);\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var _word = keys[i];\n      var s = goNext[r][_word];\n      xs.push(s); // set state = f(r)\n\n      n = failTo[r];\n\n      while (n > 0 && !goNext[n].hasOwnProperty(_word)) {\n        n = failTo[n];\n      }\n\n      if (goNext.hasOwnProperty(n)) {\n        var fs = goNext[n][_word];\n        failTo[s] = fs;\n\n        if (endAs[fs]) {\n          endAs[s] = endAs[s] || [];\n          endAs[s] = endAs[s].concat(endAs[fs]);\n        }\n      } else {\n        failTo[s] = 0;\n      }\n    }\n  }\n\n  return {\n    goNext: goNext,\n    endAs: endAs,\n    failTo: failTo\n  };\n};\n\nexport default buildTrie; // console.log(buildTrie(['smart and cool', 'smart and nice']))","map":null,"metadata":{},"sourceType":"module"}