{"ast":null,"code":"import { noop, getTense } from '../lib.js';\nvar keep = {\n  tags: true\n};\n\nvar simple = function simple(vb, parsed) {\n  var verbToInfinitive = vb.methods.two.transform.verbToInfinitive;\n  var root = parsed.root,\n      auxiliary = parsed.auxiliary; // 'i may'\n\n  if (root.has('#Modal')) {\n    return vb;\n  }\n\n  var str = root.text('normal');\n  str = verbToInfinitive(str, vb.model, getTense(root));\n\n  if (str) {\n    vb = vb.replace(root, str, keep);\n    vb.not('#Particle').tag('Verb');\n  }\n\n  vb.prepend('will').match('will').tag('Auxiliary');\n  vb.remove(auxiliary);\n  return vb;\n}; // 'will be walking'\n\n\nvar progressive = function progressive(vb, parsed) {\n  var _vb$methods$two$trans = vb.methods.two.transform,\n      verbConjugate = _vb$methods$two$trans.verbConjugate,\n      verbToInfinitive = _vb$methods$two$trans.verbToInfinitive;\n  var root = parsed.root,\n      auxiliary = parsed.auxiliary;\n  var str = root.text('normal');\n  str = verbToInfinitive(str, vb.model, getTense(root));\n\n  if (str) {\n    str = verbConjugate(str, vb.model).Gerund;\n    vb.replace(root, str, keep);\n    vb.not('#Particle').tag('PresentTense');\n  }\n\n  vb.remove(auxiliary);\n  vb.prepend('will be').match('will be').tag('Auxiliary');\n  return vb;\n};\n\nvar forms = {\n  // walk ->\n  'infinitive': simple,\n  // he walks ->\n  'simple-present': simple,\n  // he walked\n  'simple-past': simple,\n  // he will walk ->\n  'simple-future': noop,\n  // is walking ->\n  'present-progressive': progressive,\n  // was walking ->\n  'past-progressive': progressive,\n  // will be walking ->\n  'future-progressive': noop,\n  // has walked ->\n  'present-perfect': function presentPerfect(vb) {\n    vb.match('(have|has)').replaceWith('will have');\n    return vb;\n  },\n  // had walked ->\n  'past-perfect': function pastPerfect(vb) {\n    return vb.replace('(had|has)', 'will have');\n  },\n  // will have walked ->\n  'future-perfect': noop,\n  // has been walking\n  'present-perfect-progressive': function presentPerfectProgressive(vb) {\n    return vb.replace('has', 'will have');\n  },\n  // had been walking\n  'past-perfect-progressive': function pastPerfectProgressive(vb) {\n    return vb.replace('had', 'will have');\n  },\n  // will have been ->\n  'future-perfect-progressive': noop,\n  // got walked ->\n  // was walked ->\n  // was being walked ->\n  // had been walked ->\n  'passive-past': function passivePast(vb) {\n    if (vb.has('got')) {\n      return vb.replace('got', 'will get');\n    }\n\n    if (vb.has('(was|were)')) {\n      vb.replace('(was|were)', 'will be');\n      return vb.remove('being');\n    }\n\n    if (vb.has('(have|has|had) been')) {\n      return vb.replace('(have|has|had) been', 'will be');\n    }\n\n    return vb;\n  },\n  // is being walked  ->\n  'passive-present': function passivePresent(vb) {\n    vb.replace('being', 'will be');\n    vb.remove('(is|are|am)');\n    return vb;\n  },\n  // will be walked ->\n  'passive-future': noop,\n  // would be walked ->\n  'present-conditional': function presentConditional(vb) {\n    return vb.replace('would', 'will');\n  },\n  // would have been walked ->\n  'past-conditional': function pastConditional(vb) {\n    return vb.replace('would', 'will');\n  },\n  // is going to drink ->\n  'auxiliary-future': noop,\n  // used to walk -> is walking\n  // did walk -> is walking\n  'auxiliary-past': function auxiliaryPast(vb) {\n    if (vb.has('used') && vb.has('to')) {\n      vb.replace('used', 'will');\n      return vb.remove('to');\n    }\n\n    vb.replace('did', 'will');\n    return vb;\n  },\n  // we do walk ->\n  // he does walk ->\n  'auxiliary-present': function auxiliaryPresent(vb) {\n    return vb.replace('(do|does)', 'will');\n  },\n  // must walk ->\n  'modal-infinitive': noop,\n  // must have walked\n  'modal-past': noop,\n  // started looking\n  'gerund-phrase': function gerundPhrase(vb, parsed) {\n    parsed.root = parsed.root.not('#Gerund$');\n    simple(vb, parsed);\n    return vb.remove('(had|have)');\n  },\n  // wanted to walk\n  'want-infinitive': function wantInfinitive(vb) {\n    vb.replace('(want|wants|wanted)', 'will want');\n    return vb;\n  }\n};\n\nvar toFuture = function toFuture(vb, parsed, form) {\n  // console.log(form)\n  // is it already future-tense?\n  if (vb.has('will') || vb.has('going to')) {\n    return vb;\n  }\n\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed);\n    vb.fullSentence().compute(['lexicon', 'preTagger', 'postTagger', 'chunks']);\n    return vb;\n  }\n\n  return vb;\n};\n\nexport default toFuture;","map":null,"metadata":{},"sourceType":"module"}