{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/*\nunique & ordered term ids, based on time & term index\n\nBase 36 (numbers+ascii)\n  3 digit 4,600\n  2 digit 1,200\n  1 digit 36\n\n  TTT|NNN|II|R\n\nTTT -> 46 terms since load\nNNN -> 46 thousand sentences (>1 inf-jest)\nII  -> 1,200 words in a sentence (nuts)\nR   -> 1-36 random number \n\nnovels: \n  avg 80,000 words\n    15 words per sentence\n  5,000 sentences\n\nInfinite Jest:\n  36,247 sentences\n  https://en.wikipedia.org/wiki/List_of_longest_novels\n\ncollisions are more-likely after\n    46 seconds have passed,\n  and \n    after 46-thousand sentences\n\n*/\nvar start = 0;\n\nvar pad3 = function pad3(str) {\n  str = str.length < 3 ? '0' + str : str;\n  return str.length < 3 ? '0' + str : str;\n};\n\nvar toId = function toId(term) {\n  var _ref = term.index || [0, 0],\n      _ref2 = _slicedToArray(_ref, 2),\n      n = _ref2[0],\n      i = _ref2[1];\n\n  start += 1;\n  var now = start;\n  now = parseInt(now, 10); //don't overflow time\n\n  now = now > 46655 ? 46655 : now; //don't overflow sentences\n\n  n = n > 46655 ? 46655 : n; // //don't overflow terms\n\n  i = i > 1294 ? 1294 : i; // 3 digits for time\n\n  var id = pad3(now.toString(36)); // 3 digit  for sentence index (46k)\n\n  id += pad3(n.toString(36)); // 1 digit for term index (36)\n\n  var tx = i.toString(36);\n  tx = tx.length < 2 ? '0' + tx : tx; //pad2\n\n  id += tx; // 1 digit random number\n\n  var r = parseInt(Math.random() * 36, 10);\n  id += r.toString(36);\n  return term.normal + '|' + id.toUpperCase();\n};\n\nexport default toId; // setInterval(() => console.log(toId(4, 12)), 100)","map":null,"metadata":{},"sourceType":"module"}