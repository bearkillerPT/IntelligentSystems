{"ast":null,"code":"import debug from './debug/index.js';\nimport wrap from './wrap.js';\nimport hash from './lib/hash.js';\n\nvar isObject = function isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}; // sort by frequency\n\n\nvar topk = function topk(arr) {\n  var obj = {};\n  arr.forEach(function (a) {\n    obj[a] = obj[a] || 0;\n    obj[a] += 1;\n  });\n  var res = Object.keys(obj).map(function (k) {\n    return {\n      normal: k,\n      count: obj[k]\n    };\n  });\n  return res.sort(function (a, b) {\n    return a.count > b.count ? -1 : 0;\n  });\n};\n/** some named output formats */\n\n\nvar out = function out(method) {\n  // support custom outputs\n  if (isObject(method)) {\n    return wrap(this, method);\n  } // text out formats\n\n\n  if (method === 'text') {\n    return this.text();\n  }\n\n  if (method === 'normal') {\n    return this.text('normal');\n  }\n\n  if (method === 'machine' || method === 'reduced') {\n    return this.text('machine');\n  }\n\n  if (method === 'hash' || method === 'md5') {\n    return hash(this.text());\n  } // json data formats\n\n\n  if (method === 'json') {\n    return this.json();\n  }\n\n  if (method === 'offset' || method === 'offsets') {\n    this.compute('offset');\n    return this.json({\n      offset: true\n    });\n  }\n\n  if (method === 'array') {\n    var arr = this.docs.map(function (terms) {\n      return terms.reduce(function (str, t) {\n        return str + t.pre + t.text + t.post;\n      }, '').trim();\n    });\n    return arr.filter(function (str) {\n      return str;\n    });\n  } // return terms sorted by frequency\n\n\n  if (method === 'freq' || method === 'frequency' || method === 'topk') {\n    return topk(this.json({\n      normal: true\n    }).map(function (o) {\n      return o.normal;\n    }));\n  } // some handy ad-hoc outputs\n\n\n  if (method === 'terms') {\n    var list = [];\n    this.docs.forEach(function (s) {\n      var terms = s.terms.map(function (t) {\n        return t.text;\n      });\n      terms = terms.filter(function (t) {\n        return t;\n      });\n      list = list.concat(terms);\n    });\n    return list;\n  }\n\n  if (method === 'tags') {\n    return this.docs.map(function (terms) {\n      return terms.reduce(function (h, t) {\n        h[t.implicit || t.normal] = Array.from(t.tags);\n        return h;\n      }, {});\n    });\n  }\n\n  if (method === 'debug') {\n    return this.debug(); //allow\n  }\n\n  return this.text();\n};\n\nvar methods = {\n  /** */\n  debug: debug,\n\n  /** */\n  out: out\n};\nexport default methods;","map":null,"metadata":{},"sourceType":"module"}