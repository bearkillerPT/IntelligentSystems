{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport parseText from './toNumber/index.js';\nimport parseFraction from '../../fractions/parse.js';\n\nvar parseNumeric = function parseNumeric(str, m) {\n  str = str.replace(/,/g, ''); //parse a numeric-number\n\n  var arr = str.split(/([0-9.,]*)/);\n\n  var _arr = _slicedToArray(arr, 2),\n      prefix = _arr[0],\n      num = _arr[1];\n\n  var suffix = arr.slice(2).join('');\n\n  if (num !== '' && m.length < 2) {\n    num = Number(num || str); //ensure that num is an actual number\n\n    if (typeof num !== 'number') {\n      num = null;\n    } // strip an ordinal off the suffix\n\n\n    suffix = suffix || '';\n\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = '';\n    } // support M for million, k for thousand\n    // if (suffix === 'm' || suffix === 'M') {\n    //   num *= 1000000\n    //   suffix = ''\n    // }\n    // if (suffix === 'k' || suffix === 'k') {\n    //   num *= 1000\n    //   suffix = ''\n    // }\n\n\n    return {\n      prefix: prefix || '',\n      num: num,\n      suffix: suffix\n    };\n  }\n\n  return null;\n}; // get a numeric value from this phrase\n\n\nvar parseNumber = function parseNumber(m) {\n  if (typeof m === 'string') {\n    return {\n      num: parseText(m)\n    };\n  }\n\n  var str = m.text('reduced'); // is it in '3,123' format?\n\n  var hasComma = /[0-9],[0-9]/.test(m.text('text')); // parse a numeric-number like '$4.00'\n\n  if (m.terms().length === 1 && !m.has('#Multiple')) {\n    var res = parseNumeric(str, m);\n\n    if (res !== null) {\n      res.hasComma = hasComma;\n      return res;\n    }\n  } // -- parse text-formats --\n  // Fractions: remove 'and a half' etc. from the end\n\n\n  var frPart = m.match('#Fraction{2,}$');\n  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart;\n  var fraction = null;\n\n  if (frPart.found) {\n    if (frPart.has('#Value and #Value #Fraction')) {\n      frPart = frPart.match('and #Value #Fraction');\n    }\n\n    fraction = parseFraction(frPart); // remove it from our string\n\n    m = m.not(frPart);\n    m = m.not('and$');\n    str = m.text('reduced');\n  }\n\n  var num = 0;\n\n  if (str) {\n    num = parseText(str) || 0;\n  } // apply numeric fraction\n\n\n  if (fraction && fraction.decimal) {\n    num += fraction.decimal;\n  }\n\n  return {\n    hasComma: hasComma,\n    prefix: '',\n    num: num,\n    suffix: '',\n    isOrdinal: m.has('#Ordinal'),\n    isText: m.has('#TextValue'),\n    isFraction: m.has('#Fraction'),\n    isMoney: m.has('#Money')\n  };\n};\n\nexport default parseNumber;","map":null,"metadata":{},"sourceType":"module"}