{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar pairs = {\n  \"\\\"\": \"\\\"\",\n  // 'StraightDoubleQuotes'\n  \"\\uFF02\": \"\\uFF02\",\n  // 'StraightDoubleQuotesWide'\n  \"'\": \"'\",\n  // 'StraightSingleQuotes'\n  \"\\u201C\": \"\\u201D\",\n  // 'CommaDoubleQuotes'\n  \"\\u2018\": \"\\u2019\",\n  // 'CommaSingleQuotes'\n  \"\\u201F\": \"\\u201D\",\n  // 'CurlyDoubleQuotesReversed'\n  \"\\u201B\": \"\\u2019\",\n  // 'CurlySingleQuotesReversed'\n  \"\\u201E\": \"\\u201D\",\n  // 'LowCurlyDoubleQuotes'\n  \"\\u2E42\": \"\\u201D\",\n  // 'LowCurlyDoubleQuotesReversed'\n  \"\\u201A\": \"\\u2019\",\n  // 'LowCurlySingleQuotes'\n  \"\\xAB\": \"\\xBB\",\n  // 'AngleDoubleQuotes'\n  \"\\u2039\": \"\\u203A\",\n  // 'AngleSingleQuotes'\n  // Prime 'non quotation'\n  \"\\u2035\": \"\\u2032\",\n  // 'PrimeSingleQuotes'\n  \"\\u2036\": \"\\u2033\",\n  // 'PrimeDoubleQuotes'\n  \"\\u2037\": \"\\u2034\",\n  // 'PrimeTripleQuotes'\n  // Prime 'quotation' variation\n  \"\\u301D\": \"\\u301E\",\n  // 'PrimeDoubleQuotes'\n  \"`\": \"\\xB4\",\n  // 'PrimeSingleQuotes'\n  \"\\u301F\": \"\\u301E\" // 'LowPrimeDoubleQuotesReversed'\n\n};\nvar hasOpen = RegExp('(' + Object.keys(pairs).join('|') + ')');\nvar hasClosed = RegExp('(' + Object.values(pairs).join('|') + ')');\n\nvar findEnd = function findEnd(terms, i) {\n  var have = terms[i].pre.match(hasOpen)[0] || '';\n\n  if (!have || !pairs[have]) {\n    return null;\n  }\n\n  var want = pairs[have];\n\n  for (; i < terms.length; i += 1) {\n    if (terms[i].post && terms[i].post.match(want)) {\n      return i;\n    }\n  }\n\n  return null;\n};\n\nvar find = function find(doc) {\n  var ptrs = [];\n  doc.docs.forEach(function (terms) {\n    var isOpen = false;\n\n    for (var i = 0; i < terms.length; i += 1) {\n      var term = terms[i];\n\n      if (!isOpen && term.pre && hasOpen.test(term.pre)) {\n        var end = findEnd(terms, i);\n\n        if (end !== null) {\n          var _terms$i$index = _slicedToArray(terms[i].index, 2),\n              n = _terms$i$index[0],\n              start = _terms$i$index[1];\n\n          ptrs.push([n, start, end + 1, terms[i].id]);\n          i = end;\n        }\n      }\n    }\n  });\n  return doc.update(ptrs);\n};\n\nvar strip = function strip(m) {\n  m.docs.forEach(function (terms) {\n    terms[0].pre = terms[0].pre.replace(hasOpen, '');\n    var lastTerm = terms[terms.length - 1];\n    lastTerm.post = lastTerm.post.replace(hasClosed, '');\n  });\n};\n\nexport { find, strip };","map":null,"metadata":{},"sourceType":"module"}