{"ast":null,"code":"var findVerbs = function findVerbs(doc) {\n  var m = doc.match('<Verb>');\n  m = m.splitAfter('@hasComma'); // the reason he will is ...\n  // all i do is talk\n\n  m = m.splitAfter('[(do|did|am|was|is|will)] (is|was)', 0); // m = m.splitAfter('[(do|did|am|was|is|will)] #PresentTense', 0)\n  // cool\n  // like being pampered\n\n  m = m.splitBefore('(#Verb && !#Copula) [being] #Verb', 0); // like to be pampered\n\n  m = m.splitBefore('#Verb [to be] #Verb', 0); // implicit conjugation - 'help fix'\n\n  m = m.splitAfter('[help] #PresentTense', 0); // what i can sell is..\n\n  m = m.splitBefore('(#PresentTense|#PastTense) [#Copula]$', 0); // what i can sell will be\n\n  m = m.splitBefore('(#PresentTense|#PastTense) [will be]$', 0); // professes love\n\n  var toVerbs = m.match('(#PresentTense|#PastTense) #Infinitive');\n\n  if (toVerbs.found && !toVerbs.has('^go')) {\n    m = m.splitBefore('(#PresentTense|#PastTense) [#Infinitive]', 0);\n  } // 'allow yourself'\n\n\n  m = m.not('#Reflexive$'); //ensure there's actually a verb\n\n  m = m.if('#Verb'); // the reason he will is ...\n  // ensure it's not two verbs\n\n  return m;\n};\n\nexport default findVerbs;","map":null,"metadata":{},"sourceType":"module"}