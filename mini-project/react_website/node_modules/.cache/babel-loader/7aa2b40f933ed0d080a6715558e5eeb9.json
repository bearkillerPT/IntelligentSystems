{"ast":null,"code":"var clauses = function clauses(n) {\n  // an awkward way to disambiguate a comma use\n  var commas = this.if('@hasComma').ifNo('@hasComma @hasComma') //fun, cool...\n  .ifNo('@hasComma (and|or) .') //cool, and fun\n  .ifNo('(#City && @hasComma) #Country') //'toronto, canada'\n  .ifNo('(#WeekDay && @hasComma) #Date') //'tuesday, march 2nd'\n  .ifNo('(#Date+ && @hasComma) #Value') //'july 6, 1992'\n  .ifNo('@hasComma (too|also)$') //at end of sentence\n  .match('@hasComma');\n  var found = this.splitAfter(commas); // let quotes = found.quotations()\n  // found = found.splitOn(quotes)\n  // let parentheses = found.parentheses()\n  // found = found.splitOn(parentheses)\n  // it is cool and it is ..\n\n  var conjunctions = found.if('#Copula #Adjective #Conjunction (#Pronoun|#Determiner) #Verb').match('#Conjunction');\n  found = found.splitBefore(conjunctions); // if it is this then that\n\n  var condition = found.if('if .{2,9} then .').match('then');\n  found = found.splitBefore(condition); // misc clause partitions\n\n  found = found.splitBefore('as well as .');\n  found = found.splitBefore('such as .');\n  found = found.splitBefore('in addition to .'); // semicolons, dashes\n\n  found = found.splitAfter('@hasSemicolon');\n  found = found.splitAfter('@hasDash'); // passive voice verb - '.. which was robbed is empty'\n  // let passive = found.match('#Noun (which|that) (was|is) #Adverb? #PastTense #Adverb?')\n  // if (passive.found) {\n  //   found = found.splitAfter(passive)\n  // }\n  // //which the boy robbed\n  // passive = found.match('#Noun (which|that) the? #Noun+ #Adverb? #PastTense #Adverb?')\n  // if (passive.found) {\n  //   found = found.splitAfter(passive)\n  // }\n  // does there appear to have relative/subordinate clause still?\n\n  var tooLong = found.filter(function (d) {\n    return d.wordCount() > 5 && d.match('#Verb+').length >= 2;\n  });\n\n  if (tooLong.found) {\n    var m = tooLong.splitAfter('#Noun .* #Verb .* #Noun+');\n    found = found.splitOn(m.eq(0));\n  }\n\n  if (typeof n === 'number') {\n    found = found.get(n);\n  }\n\n  return found;\n};\n\nexport default clauses;","map":null,"metadata":{},"sourceType":"module"}