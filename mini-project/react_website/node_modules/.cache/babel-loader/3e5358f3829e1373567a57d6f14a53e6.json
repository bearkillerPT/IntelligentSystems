{"ast":null,"code":"import rules from './_rules.js';\nvar addE = /([xsz]|ch|sh)$/;\n\nvar trySuffix = function trySuffix(str) {\n  var c = str[str.length - 1];\n\n  if (rules.hasOwnProperty(c) === true) {\n    for (var i = 0; i < rules[c].length; i += 1) {\n      var reg = rules[c][i][0];\n\n      if (reg.test(str) === true) {\n        return str.replace(reg, rules[c][i][1]);\n      }\n    }\n  }\n\n  return null;\n};\n/** Turn a singular noun into a plural\n * assume the given string is singular\n */\n\n\nvar pluralize = function pluralize() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var model = arguments.length > 1 ? arguments[1] : undefined;\n  var _model$two = model.two,\n      irregularPlurals = _model$two.irregularPlurals,\n      uncountable = _model$two.uncountable; // is it a word without a plural form?\n\n  if (uncountable.hasOwnProperty(str)) {\n    return str;\n  } // check irregulars list\n\n\n  if (irregularPlurals.hasOwnProperty(str)) {\n    return irregularPlurals[str];\n  } //we have some rules to try-out\n\n\n  var plural = trySuffix(str);\n\n  if (plural !== null) {\n    return plural;\n  } //like 'church'\n\n\n  if (addE.test(str)) {\n    return str + 'es';\n  } // ¯\\_(ツ)_/¯\n\n\n  return str + 's';\n};\n\nexport default pluralize;","map":null,"metadata":{},"sourceType":"module"}