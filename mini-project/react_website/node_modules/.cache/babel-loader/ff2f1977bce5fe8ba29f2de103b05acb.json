{"ast":null,"code":"//is this sentence asking a question?\nvar isQuestion = function isQuestion(doc) {\n  var clauses = doc.clauses(); // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n\n  if (/\\.\\.$/.test(doc.out('text'))) {\n    return false;\n  } // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n\n\n  if (doc.has('^#QuestionWord') && doc.has('@hasComma')) {\n    return false;\n  } // do you see it or not\n\n\n  if (doc.has('or not$')) {\n    return true;\n  } // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n\n\n  if (doc.has('^#QuestionWord')) {\n    return true;\n  } // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n\n\n  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true;\n  } // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n\n\n  if (doc.has('^(have|must) you')) {\n    return true;\n  } // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n  // if (clauses.has('^#QuestionWord')) {\n  //   return true\n  // }\n  //is wayne gretskzy alive\n\n\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true;\n  } // Probably not a question\n\n\n  return false;\n};\n\nvar findQuestions = function findQuestions(view) {\n  var hasQ = /\\?/;\n  var document = view.document;\n  return view.filter(function (m) {\n    var terms = m.docs[0] || [];\n    var lastTerm = terms[terms.length - 1]; // is it not a full sentence?\n\n    if (!lastTerm || document[lastTerm.index[0]].length !== terms.length) {\n      return false;\n    } // does it end with a question mark?\n\n\n    if (hasQ.test(lastTerm.post)) {\n      return true;\n    } // try to guess a sentence without a question-mark\n\n\n    return isQuestion(m);\n  });\n};\n\nexport default findQuestions;","map":null,"metadata":{},"sourceType":"module"}