{"ast":null,"code":"var methods = {\n  /** add this punctuation or whitespace before each match: */\n  pre: function pre(str, concat) {\n    if (str === undefined && this.found) {\n      return this.docs[0][0].pre;\n    }\n\n    this.docs.forEach(function (terms) {\n      var term = terms[0];\n\n      if (concat === true) {\n        term.pre += str;\n      } else {\n        term.pre = str;\n      }\n    });\n    return this;\n  },\n\n  /** add this punctuation or whitespace after each match: */\n  post: function post(str, concat) {\n    if (str === undefined) {\n      var last = this.docs[this.docs.length - 1];\n      return last[last.length - 1].post;\n    }\n\n    this.docs.forEach(function (terms) {\n      var term = terms[terms.length - 1];\n\n      if (concat === true) {\n        term.post += str;\n      } else {\n        term.post = str;\n      }\n    });\n    return this;\n  },\n\n  /** remove whitespace from start/end */\n  trim: function trim() {\n    if (!this.found) {\n      return this;\n    }\n\n    var docs = this.docs;\n    var start = docs[0][0];\n    start.pre = start.pre.trimStart();\n    var last = docs[docs.length - 1];\n    var end = last[last.length - 1];\n    end.post = end.post.trimEnd();\n    return this;\n  },\n\n  /** connect words with hyphen, and remove whitespace */\n  hyphenate: function hyphenate() {\n    this.docs.forEach(function (terms) {\n      //remove whitespace\n      terms.forEach(function (t, i) {\n        if (i !== 0) {\n          t.pre = '';\n        }\n\n        if (terms[i + 1]) {\n          t.post = '-';\n        }\n      });\n    });\n    return this;\n  },\n\n  /** remove hyphens between words, and set whitespace */\n  dehyphenate: function dehyphenate() {\n    var hasHyphen = /[-–—]/;\n    this.docs.forEach(function (terms) {\n      //remove whitespace\n      terms.forEach(function (t) {\n        if (hasHyphen.test(t.post)) {\n          t.post = ' ';\n        }\n      });\n    });\n    return this;\n  },\n\n  /** add quotations around these matches */\n  toQuotations: function toQuotations(start, end) {\n    start = start || \"\\\"\";\n    end = end || \"\\\"\";\n    this.docs.forEach(function (terms) {\n      terms[0].pre = start + terms[0].pre;\n      var last = terms[terms.length - 1];\n      last.post = end + last.post;\n    });\n    return this;\n  },\n\n  /** add brackets around these matches */\n  toParentheses: function toParentheses(start, end) {\n    start = start || \"(\";\n    end = end || \")\";\n    this.docs.forEach(function (terms) {\n      terms[0].pre = start + terms[0].pre;\n      var last = terms[terms.length - 1];\n      last.post = end + last.post;\n    });\n    return this;\n  }\n};\nmethods.deHyphenate = methods.dehyphenate;\nmethods.toQuotation = methods.toQuotations;\nexport default methods;","map":null,"metadata":{},"sourceType":"module"}