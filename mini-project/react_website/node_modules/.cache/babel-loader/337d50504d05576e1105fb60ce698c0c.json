{"ast":null,"code":"// verbose-mode tagger debuging\nvar log = function log(term, tag) {\n  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  var yellow = function yellow(str) {\n    return '\\x1b[33m\\x1b[3m' + str + '\\x1b[0m';\n  };\n\n  var i = function i(str) {\n    return '\\x1b[3m' + str + '\\x1b[0m';\n  };\n\n  var word = term.text || '[' + term.implicit + ']';\n\n  if (typeof tag !== 'string' && tag.length > 2) {\n    tag = tag.slice(0, 2).join(', #') + ' +'; //truncate the list of tags\n  }\n\n  tag = typeof tag !== 'string' ? tag.join(', #') : tag;\n  console.log(\" \".concat(yellow(word).padEnd(24), \" \\x1B[32m\\u2192\\x1B[0m #\").concat(tag.padEnd(22), \"  \").concat(i(reason))); // eslint-disable-line\n}; // a faster version than the user-facing one in ./methods\n\n\nvar setTag = function setTag(term, tag, reason) {\n  if (!tag || tag.length === 0) {\n    return;\n  } // some logging for debugging\n\n\n  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;\n\n  if (env && env.DEBUG_TAGS) {\n    log(term, tag, reason);\n  }\n\n  term.tags = term.tags || new Set();\n\n  if (typeof tag === 'string') {\n    term.tags.add(tag);\n  } else {\n    tag.forEach(function (tg) {\n      return term.tags.add(tg);\n    });\n  }\n};\n\nexport default setTag;","map":null,"metadata":{},"sourceType":"module"}