{"ast":null,"code":"var BASE = 36;\nvar seq = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar cache = seq.split('').reduce(function (h, c, i) {\n  h[c] = i;\n  return h;\n}, {}); // 0, 1, 2, ..., A, B, C, ..., 00, 01, ... AA, AB, AC, ..., AAA, AAB, ...\n\nvar toAlphaCode = function toAlphaCode(n) {\n  if (seq[n] !== undefined) {\n    return seq[n];\n  }\n\n  var places = 1;\n  var range = BASE;\n  var s = '';\n\n  for (; n >= range; n -= range, places++, range *= BASE) {}\n\n  while (places--) {\n    var d = n % BASE;\n    s = String.fromCharCode((d < 10 ? 48 : 55) + d) + s;\n    n = (n - d) / BASE;\n  }\n\n  return s;\n};\n\nvar fromAlphaCode = function fromAlphaCode(s) {\n  if (cache[s] !== undefined) {\n    return cache[s];\n  }\n\n  var n = 0;\n  var places = 1;\n  var range = BASE;\n  var pow = 1;\n\n  for (; places < s.length; n += range, places++, range *= BASE) {}\n\n  for (var i = s.length - 1; i >= 0; i--, pow *= BASE) {\n    var d = s.charCodeAt(i) - 48;\n\n    if (d > 10) {\n      d -= 7;\n    }\n\n    n += d * pow;\n  }\n\n  return n;\n};\n\nexport default {\n  toAlphaCode: toAlphaCode,\n  fromAlphaCode: fromAlphaCode\n};","map":null,"metadata":{},"sourceType":"module"}