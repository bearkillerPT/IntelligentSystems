{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar combine = function combine(left, right) {\n  return [left[0], left[1], right[2]];\n};\n\nvar isArray = function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n};\n\nvar getDoc = function getDoc(reg, view, group) {\n  if (typeof reg === 'string' || isArray(reg)) {\n    return view.match(reg, group);\n  }\n\n  if (!reg) {\n    return view.none();\n  }\n\n  return reg;\n};\n\nvar addIds = function addIds(ptr, view) {\n  var _ptr = _slicedToArray(ptr, 3),\n      n = _ptr[0],\n      start = _ptr[1],\n      end = _ptr[2];\n\n  if (view.document[n] && view.document[n][start]) {\n    ptr[3] = ptr[3] || view.document[n][start].id;\n\n    if (view.document[n][end - 1]) {\n      ptr[4] = ptr[4] || view.document[n][end - 1].id;\n    }\n  }\n\n  return ptr;\n};\n\nvar methods = {}; // [before], [match], [after]\n\nmethods.splitOn = function (m, group) {\n  var _this = this;\n\n  var splitAll = this.methods.one.pointer.splitAll;\n  var splits = getDoc(m, this, group).fullPointer;\n  var all = splitAll(this.fullPointer, splits);\n  var res = [];\n  all.forEach(function (o) {\n    res.push(o.passthrough);\n    res.push(o.before);\n    res.push(o.match);\n    res.push(o.after);\n  });\n  res = res.filter(function (p) {\n    return p;\n  });\n  res = res.map(function (p) {\n    return addIds(p, _this);\n  });\n  return this.update(res);\n}; // [before], [match after]\n\n\nmethods.splitBefore = function (m, group) {\n  var _this2 = this;\n\n  var splitAll = this.methods.one.pointer.splitAll;\n  var splits = getDoc(m, this, group).fullPointer;\n  var all = splitAll(this.fullPointer, splits);\n  var res = [];\n  all.forEach(function (o) {\n    res.push(o.passthrough);\n    res.push(o.before);\n\n    if (o.match && o.after) {\n      // console.log(combine(o.match, o.after))\n      res.push(combine(o.match, o.after));\n    } else {\n      res.push(o.match);\n      res.push(o.after);\n    }\n  });\n  res = res.filter(function (p) {\n    return p;\n  });\n  res = res.map(function (p) {\n    return addIds(p, _this2);\n  });\n  return this.update(res);\n}; // [before match], [after]\n\n\nmethods.splitAfter = function (m, group) {\n  var _this3 = this;\n\n  var splitAll = this.methods.one.pointer.splitAll;\n  var splits = getDoc(m, this, group).fullPointer;\n  var all = splitAll(this.fullPointer, splits);\n  var res = [];\n  all.forEach(function (o) {\n    res.push(o.passthrough);\n\n    if (o.before && o.match) {\n      res.push(combine(o.before, o.match));\n    } else {\n      res.push(o.before);\n      res.push(o.match);\n    }\n\n    res.push(o.after);\n  });\n  res = res.filter(function (p) {\n    return p;\n  });\n  res = res.map(function (p) {\n    return addIds(p, _this3);\n  });\n  return this.update(res);\n};\n\nmethods.split = methods.splitAfter;\nexport default methods;","map":null,"metadata":{},"sourceType":"module"}