{"ast":null,"code":"var trimEnd = /[,:;)\\]*.?~!\\u0022\\uFF02\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4—-]+$/;\nvar trimStart = /^[(['\"*~\\uFF02\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/;\nvar punctToKill = /[,:;)('\"\\u201D\\]]/;\nvar isHyphen = /^[-–—]$/;\nvar hasSpace = / /;\n\nvar textFromTerms = function textFromTerms(terms, opts) {\n  var keepSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var txt = '';\n  terms.forEach(function (t) {\n    var pre = t.pre || '';\n    var post = t.post || '';\n\n    if (opts.punctuation === 'some') {\n      pre = pre.replace(trimStart, ''); // replace a hyphen with a space\n\n      if (isHyphen.test(post)) {\n        post = ' ';\n      }\n\n      post = post.replace(punctToKill, ''); // cleanup exclamations\n\n      post = post.replace(/\\?!+/, '?');\n      post = post.replace(/!+/, '!');\n      post = post.replace(/\\?+/, '?'); // kill elipses\n\n      post = post.replace(/\\.{2,}/, ''); // kill abbreviation periods\n\n      if (t.tags.has('Abbreviation')) {\n        post = post.replace(/\\./, '');\n      }\n    }\n\n    if (opts.whitespace === 'some') {\n      pre = pre.replace(/\\s/, ''); //remove pre-whitespace\n\n      post = post.replace(/\\s+/, ' '); //replace post-whitespace with a space\n    }\n\n    if (!opts.keepPunct) {\n      pre = pre.replace(trimStart, '');\n\n      if (post === '-') {\n        post = ' ';\n      } else {\n        post = post.replace(trimEnd, '');\n      }\n    } // grab the correct word format\n\n\n    var word = t[opts.form || 'text'] || t.normal || '';\n\n    if (opts.form === 'implicit') {\n      word = t.implicit || t.text;\n    }\n\n    if (opts.form === 'root' && t.implicit) {\n      word = t.root || t.implicit || t.normal;\n    } // add an implicit space, for contractions\n\n\n    if ((opts.form === 'machine' || opts.form === 'implicit' || opts.form === 'root') && t.implicit) {\n      if (!post || !hasSpace.test(post)) {\n        post += ' ';\n      }\n    }\n\n    txt += pre + word + post;\n  });\n\n  if (keepSpace === false) {\n    txt = txt.trim();\n  }\n\n  if (opts.lowerCase === true) {\n    txt = txt.toLowerCase();\n  }\n\n  return txt;\n};\n\nvar textFromDoc = function textFromDoc(docs, opts) {\n  var text = '';\n\n  if (!docs || !docs[0] || !docs[0][0]) {\n    return text;\n  }\n\n  for (var i = 0; i < docs.length; i += 1) {\n    // middle\n    text += textFromTerms(docs[i], opts, true);\n  }\n\n  if (!opts.keepSpace) {\n    text = text.trim();\n  }\n\n  if (opts.keepPunct === false) {\n    // don't remove ':)' etc\n    if (!docs[0][0].tags.has('Emoticon')) {\n      text = text.replace(trimStart, '');\n    }\n\n    var last = docs[docs.length - 1];\n\n    if (!last[last.length - 1].tags.has('Emoticon')) {\n      text = text.replace(trimEnd, '');\n    }\n  }\n\n  if (opts.cleanWhitespace === true) {\n    text = text.trim();\n  }\n\n  return text;\n};\n\nexport { textFromDoc, textFromTerms };","map":null,"metadata":{},"sourceType":"module"}