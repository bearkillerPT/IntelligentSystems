{"ast":null,"code":"import methods from './lib/_sort.js'; // aliases\n\nvar seqNames = new Set(['index', 'sequence', 'seq', 'sequential', 'chron', 'chronological']);\nvar freqNames = new Set(['freq', 'frequency', 'topk', 'repeats']);\nvar alphaNames = new Set(['alpha', 'alphabetical']); // support function as parameter\n\nvar customSort = function customSort(view, fn) {\n  var ptrs = view.fullPointer;\n  ptrs = ptrs.sort(function (a, b) {\n    a = view.update([a]);\n    b = view.update([b]);\n    return fn(a, b);\n  });\n  view.ptrs = ptrs; //mutate original\n\n  return view;\n};\n/** re-arrange the order of the matches (in place) */\n\n\nvar sort = function sort(input) {\n  var docs = this.docs,\n      pointer = this.pointer;\n\n  if (typeof input === 'function') {\n    return customSort(this, input);\n  }\n\n  input = input || 'alpha';\n  var ptrs = pointer || docs.map(function (_d, n) {\n    return [n];\n  });\n  var arr = docs.map(function (terms, n) {\n    return {\n      index: n,\n      words: terms.length,\n      normal: terms.map(function (t) {\n        return t.machine || t.normal || '';\n      }).join(' '),\n      pointer: ptrs[n]\n    };\n  }); // 'chronological' sorting\n\n  if (seqNames.has(input)) {\n    input = 'sequential';\n  } // alphabetical sorting\n\n\n  if (alphaNames.has(input)) {\n    input = 'alpha';\n  } // sort by frequency\n\n\n  if (freqNames.has(input)) {\n    arr = methods.byFreq(arr);\n    return this.update(arr.map(function (o) {\n      return o.pointer;\n    }));\n  } // apply sort method on each phrase\n\n\n  if (typeof methods[input] === 'function') {\n    arr = arr.sort(methods[input]);\n    return this.update(arr.map(function (o) {\n      return o.pointer;\n    }));\n  }\n\n  return this;\n};\n/** reverse the order of the matches, but not the words or index */\n\n\nvar reverse = function reverse() {\n  var ptrs = this.pointer || this.docs.map(function (_d, n) {\n    return [n];\n  });\n  ptrs = [].concat(ptrs);\n  ptrs = ptrs.reverse();\n  return this.update(ptrs);\n};\n/** remove any duplicate matches */\n\n\nvar unique = function unique() {\n  var already = new Set();\n  var res = this.filter(function (m) {\n    var txt = m.text('machine');\n\n    if (already.has(txt)) {\n      return false;\n    }\n\n    already.add(txt);\n    return true;\n  }); // this.ptrs = res.ptrs //mutate original?\n\n  return res; //.compute('index')\n};\n\nexport default {\n  unique: unique,\n  reverse: reverse,\n  sort: sort\n};","map":null,"metadata":{},"sourceType":"module"}