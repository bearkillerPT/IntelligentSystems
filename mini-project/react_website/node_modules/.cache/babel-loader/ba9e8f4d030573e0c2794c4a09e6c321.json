{"ast":null,"code":"import colors from './_colors.js';\n\nvar getColor = function getColor(node) {\n  if (colors.hasOwnProperty(node.id)) {\n    return colors[node.id];\n  }\n\n  if (colors.hasOwnProperty(node.is)) {\n    return colors[node.is];\n  }\n\n  var found = node._cache.parents.find(function (c) {\n    return colors[c];\n  });\n\n  return colors[found];\n}; // convert tags to our final format\n\n\nvar fmt = function fmt(nodes) {\n  var res = {};\n  nodes.forEach(function (node) {\n    var _node$props = node.props,\n        not = _node$props.not,\n        also = _node$props.also,\n        is = _node$props.is,\n        novel = _node$props.novel;\n    var parents = node._cache.parents;\n\n    if (also) {\n      parents = parents.concat(also);\n    }\n\n    res[node.id] = {\n      is: is,\n      not: not,\n      novel: novel,\n      also: also,\n      parents: parents,\n      children: node._cache.children,\n      color: getColor(node)\n    };\n  }); // lastly, add all children of all nots\n\n  Object.keys(res).forEach(function (k) {\n    var nots = new Set(res[k].not);\n    res[k].not.forEach(function (not) {\n      if (res[not]) {\n        res[not].children.forEach(function (tag) {\n          return nots.add(tag);\n        });\n      }\n    });\n    res[k].not = Array.from(nots);\n  });\n  return res;\n};\n\nexport default fmt;","map":null,"metadata":{},"sourceType":"module"}