{"ast":null,"code":"var prefix = /^([0-9]+)/;\nimport { indexRules } from '../_lib.js';\n\nvar expand = function expand() {\n  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  val = String(val);\n  var m = val.match(prefix);\n\n  if (m === null) {\n    return [key, val];\n  }\n\n  var num = Number(m[1]) || 0;\n  var pre = key.substring(0, num);\n  var full = pre + val.replace(prefix, '');\n  return [key, full];\n};\n\nvar toArray = function toArray(txt) {\n  var pipe = /\\|/;\n  return txt.split(/,/).map(function (str) {\n    var a = str.split(pipe);\n    return expand(a[0], a[1]);\n  });\n};\n\nvar uncompress = function uncompress() {\n  var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  model = Object.assign({}, model); // compress fwd rules\n\n  model.rules = toArray(model.rules);\n  model.rules = indexRules(model.rules); // compress reverse rules\n\n  if (model.rev) {\n    model.rev = toArray(model.rev);\n    model.rev = indexRules(model.rev);\n  } // compress exceptions\n\n\n  model.exceptions = toArray(model.exceptions);\n  model.exceptions = model.exceptions.reduce(function (h, a) {\n    h[a[0]] = a[1];\n    return h;\n  }, {});\n  return model;\n};\n\nexport default uncompress; // console.log(expand('fixture', '6ing'))\n// console.log(toArray('heard|4'))","map":null,"metadata":{},"sourceType":"module"}