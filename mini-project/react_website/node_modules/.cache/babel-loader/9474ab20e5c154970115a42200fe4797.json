{"ast":null,"code":"var postPunct = /[,)\"';:\\-–—.…]/;\n\nvar setContraction = function setContraction(m, suffix) {\n  if (!m.found) {\n    return;\n  }\n\n  var terms = m.termList(); //avoid any problematic punctuation\n\n  for (var i = 0; i < terms.length - 1; i++) {\n    var t = terms[i];\n\n    if (postPunct.test(t.post)) {\n      return;\n    }\n  } // set first word as full text\n\n\n  terms[0].implicit = terms[0].normal;\n  terms[0].text += suffix;\n  terms[0].normal += suffix; // clean-up the others\n\n  terms.slice(1).forEach(function (t) {\n    t.implicit = t.normal;\n    t.text = '';\n    t.normal = '';\n  });\n\n  for (var _i = 0; _i < terms.length - 1; _i++) {\n    terms[_i].post = terms[_i].post.replace(/ /, '');\n  }\n};\n/** turn 'i am' into i'm */\n\n\nvar contract = function contract() {\n  var doc = this.not('@hasContraction'); // we are -> we're\n\n  var m = doc.match('(we|they|you) are');\n  setContraction(m, \"'re\"); // they will -> they'll\n\n  m = doc.match('(he|she|they|it|we|you) will');\n  setContraction(m, \"'ll\"); // she is -> she's\n\n  m = doc.match('(he|she|they|it|we) is');\n  setContraction(m, \"'s\"); // spencer is -> spencer's\n\n  m = doc.match('#Person is');\n  setContraction(m, \"'s\"); // spencer would -> spencer'd\n\n  m = doc.match('#Person would');\n  setContraction(m, \"'d\"); // would not -> wouldn't\n\n  m = doc.match('(is|was|had|would|should|could|do|does|have|has|can) not');\n  setContraction(m, \"n't\"); // i have -> i've\n\n  m = doc.match('(i|we|they) have');\n  setContraction(m, \"'ve\"); // would have -> would've\n\n  m = doc.match('(would|should|could) have');\n  setContraction(m, \"'ve\"); // i am -> i'm\n\n  m = doc.match('i am');\n  setContraction(m, \"'m\"); // going to -> gonna\n\n  m = doc.match('going to');\n  return this;\n};\n\nexport default contract;","map":null,"metadata":{},"sourceType":"module"}