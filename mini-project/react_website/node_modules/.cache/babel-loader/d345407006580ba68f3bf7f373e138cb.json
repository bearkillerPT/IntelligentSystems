{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { convert } from 'suffix-thumb';\nimport getTense from '../getTense/index.js';\n\nvar toParts = function toParts(str, model) {\n  var prefix = '';\n  var prefixes = {};\n\n  if (model.one && model.one.prefixes) {\n    prefixes = model.one.prefixes;\n  } // pull-apart phrasal verb 'fall over'\n\n\n  var _str$split = str.split(/ /),\n      _str$split2 = _slicedToArray(_str$split, 2),\n      verb = _str$split2[0],\n      particle = _str$split2[1]; // support 'over cleaned'\n\n\n  if (particle && prefixes[verb] === true) {\n    prefix = verb;\n    verb = particle;\n    particle = '';\n  }\n\n  return {\n    prefix: prefix,\n    verb: verb,\n    particle: particle\n  };\n}; // dunno about these..\n\n\nvar copulaMap = {\n  are: 'be',\n  were: 'be',\n  been: 'be',\n  is: 'be',\n  am: 'be',\n  was: 'be',\n  be: 'be',\n  being: 'be'\n};\n\nvar toInfinitive = function toInfinitive(str, model, tense) {\n  var _model$two$models = model.two.models,\n      fromPast = _model$two$models.fromPast,\n      fromPresent = _model$two$models.fromPresent,\n      fromGerund = _model$two$models.fromGerund,\n      fromParticiple = _model$two$models.fromParticiple; // if (str.length < 3) {\n  //   return str\n  // }\n\n  var _toParts = toParts(str, model),\n      prefix = _toParts.prefix,\n      verb = _toParts.verb,\n      particle = _toParts.particle;\n\n  var inf = '';\n\n  if (!tense) {\n    tense = getTense(str);\n  }\n\n  if (copulaMap.hasOwnProperty(str)) {\n    inf = copulaMap[str];\n  } else if (tense === 'Participle') {\n    inf = convert(verb, fromParticiple);\n  } else if (tense === 'PastTense') {\n    inf = convert(verb, fromPast);\n  } else if (tense === 'PresentTense') {\n    inf = convert(verb, fromPresent);\n  } else if (tense === 'Gerund') {\n    inf = convert(verb, fromGerund);\n  } else {\n    return str;\n  } // stitch phrasal back on\n\n\n  if (particle) {\n    inf += ' ' + particle;\n  } // stitch prefix back on\n\n\n  if (prefix) {\n    inf = prefix + ' ' + inf;\n  }\n\n  return inf;\n};\n\nexport default toInfinitive; // console.log(toInfinitive('snarled', { one: {} }))\n// console.log(convert('snarled', fromPast))","map":null,"metadata":{},"sourceType":"module"}