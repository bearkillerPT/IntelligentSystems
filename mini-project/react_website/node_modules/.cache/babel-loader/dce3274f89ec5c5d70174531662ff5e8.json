{"ast":null,"code":"import Trie from './trie.js';\n\nvar isArray = function isArray(input) {\n  return Object.prototype.toString.call(input) === '[object Array]';\n};\n\nvar handleFormats = function handleFormats(input) {\n  //null\n  if (input === null || input === undefined) {\n    return {};\n  } //string\n\n\n  if (typeof input === 'string') {\n    return input.split(/ +/g).reduce(function (h, str) {\n      h[str] = true;\n      return h;\n    }, {});\n  } //array\n\n\n  if (isArray(input)) {\n    return input.reduce(function (h, str) {\n      h[str] = true;\n      return h;\n    }, {});\n  } //object\n\n\n  return input;\n}; //turn an array into a compressed string\n\n\nvar pack = function pack(obj) {\n  obj = handleFormats(obj); //pivot into categories:\n\n  var flat = Object.keys(obj).reduce(function (h, k) {\n    var val = obj[k]; //array version-\n    //put it in several buckets\n\n    if (isArray(val)) {\n      for (var i = 0; i < val.length; i++) {\n        h[val[i]] = h[val[i]] || [];\n        h[val[i]].push(k);\n      }\n\n      return h;\n    } //normal string/boolean version\n\n\n    if (h.hasOwnProperty(val) === false) {\n      //basically h[val]=[]  - support reserved words\n      Object.defineProperty(h, val, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: []\n      });\n    }\n\n    h[val].push(k);\n    return h;\n  }, {}); //pack each into a compressed string\n\n  Object.keys(flat).forEach(function (k) {\n    var t = new Trie(flat[k]);\n    flat[k] = t.pack();\n  });\n  return Object.keys(flat).map(function (k) {\n    return k + 'Â¦' + flat[k];\n  }).join('|');\n};\n\nexport default pack;","map":null,"metadata":{},"sourceType":"module"}