{"ast":null,"code":"/*\n  Important notice - \n  this method makes many assumptions about gender-identity, in-order to assign grammatical gender.\n  it should not be used for any other purposes, other than resolving pronouns in english\n*/\nvar m = 'male';\nvar f = 'female'; // known gendered honorifics\n\nvar honorifics = {\n  mr: m,\n  mrs: f,\n  miss: f,\n  madam: f,\n  // british stuff\n  king: m,\n  queen: f,\n  duke: m,\n  duchess: f,\n  baron: m,\n  baroness: f,\n  count: m,\n  countess: f,\n  prince: m,\n  princess: f,\n  sire: m,\n  dame: f,\n  lady: f,\n  ayatullah: m,\n  //i think?\n  congressman: m,\n  congresswoman: f,\n  'first lady': f,\n  // marked as non-binary\n  mx: null\n};\n\nvar predictGender = function predictGender(parsed, person) {\n  var firstName = parsed.firstName,\n      honorific = parsed.honorific; // use first-name as signal-signal\n\n  if (firstName.has('#FemaleName')) {\n    return f;\n  }\n\n  if (firstName.has('#MaleName')) {\n    return m;\n  } // use honorics as gender-signal\n\n\n  if (honorific.found) {\n    var hon = honorific.text('normal');\n    hon = hon.replace(/\\./g, ''); //clean it up a bit\n\n    if (honorifics.hasOwnProperty(hon)) {\n      return honorifics[hon];\n    } // her excelency\n\n\n    if (/^her /.test(hon)) {\n      return f;\n    }\n\n    if (/^his /.test(hon)) {\n      return m;\n    }\n  } // offer used-pronouns as a signal\n\n\n  var after = person.after();\n\n  if (!after.has('#Person') && after.has('#Pronoun')) {\n    var pro = after.match('#Pronoun'); // manual use of gender-neutral\n\n    if (pro.has('(they|their)')) {\n      return null;\n    }\n\n    var hasMasc = pro.has('(he|his)');\n    var hasFem = pro.has('(she|her|hers)');\n\n    if (hasMasc && !hasFem) {\n      return m;\n    }\n\n    if (hasFem && !hasMasc) {\n      return f;\n    }\n  }\n\n  return null;\n};\n\nexport default predictGender;","map":null,"metadata":{},"sourceType":"module"}