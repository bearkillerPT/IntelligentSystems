{"ast":null,"code":"var setChunk = function setChunk(term, chunk) {\n  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;\n\n  if (env.DEBUG_CHUNKS) {\n    var str = (term.normal + \"'\").padEnd(8);\n    console.log(\"  | '\".concat(str, \"  \\u2192  \\x1B[34m\").concat(chunk.padEnd(12), \"\\x1B[0m \\x1B[2m -fallback- \\x1B[0m\")); // eslint-disable-line\n  }\n\n  term.chunk = chunk;\n}; // ensure everything has a chunk\n\n\nvar fallback = function fallback(document) {\n  for (var n = 0; n < document.length; n += 1) {\n    for (var t = 0; t < document[n].length; t += 1) {\n      var term = document[n][t];\n\n      if (term.chunk === undefined) {\n        // conjunctions stand alone\n        if (term.tags.has('Conjunction')) {\n          setChunk(term, 'Pivot');\n        } else if (term.tags.has('Preposition')) {\n          setChunk(term, 'Pivot');\n        } else if (term.tags.has('Adverb')) {\n          setChunk(term, 'Verb');\n        } // just take the chunk on the right?\n        // else if (document[n][t + 1] && document[n][t + 1].chunk) {\n        //   setChunk(term, document[n][t + 1].chunk)\n        // }\n        // // or take the chunk on the left\n        // else if (document[n][t - 1] && document[n][t - 1].chunk) {\n        //   setChunk(term, document[n][t - 1].chunk)\n        else {\n          //  ¯\\_(ツ)_/¯\n          term.chunk = 'Noun';\n        }\n      }\n    }\n  }\n};\n\nexport default fallback;","map":null,"metadata":{},"sourceType":"module"}