{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar getCounts = function getCounts(rule, pairs) {\n  var yes = 0;\n  var no = 0;\n  pairs.forEach(function (pair) {\n    var _pair = _slicedToArray(pair, 2),\n        left = _pair[0],\n        right = _pair[1];\n\n    if (!rule.reg.test(left)) {\n      return;\n    } // console.log(replace(left, rule.from, rule.to), left.replace(rule.reg, rule.to))\n    // if (replace(left, rule.from, rule.to) === right) {\n\n\n    if (left.replace(rule.reg, rule.to) === right) {\n      yes += 1;\n    } else {\n      no += 1;\n    }\n  });\n  return {\n    yes: yes,\n    no: no\n  };\n};\n\nvar score = function score(rules, pairs) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  rules = rules.map(function (rule) {\n    var _getCounts = getCounts(rule, pairs),\n        yes = _getCounts.yes,\n        no = _getCounts.no;\n\n    rule.yes = yes;\n    rule.no = no;\n    delete rule.id;\n    return rule;\n  }); // worst-to-best\n\n  rules = rules.sort(function (a, b) {\n    if (a.yes > b.yes) {\n      return 1;\n    } else if (a.yes < b.yes) {\n      return -1;\n    }\n\n    return 0;\n  });\n  return rules;\n};\n\nexport default score;","map":null,"metadata":{},"sourceType":"module"}