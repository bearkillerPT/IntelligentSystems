{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport isQuestion from './questions.js';\nimport parse from './parse/index.js';\nimport toPast from './conjugate/toPast.js';\nimport toPresent from './conjugate/toPresent.js';\nimport toFuture from './conjugate/toFuture.js';\nimport { toNegative as _toNegative, toPositive as _toPositive } from './conjugate/toNegative.js';\nimport _toInfinitive from './conjugate/toInfinitive.js'; // return the nth elem of a doc\n\nexport var getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n};\n\nvar api = function api(View) {\n  var Sentences = /*#__PURE__*/function (_View) {\n    _inherits(Sentences, _View);\n\n    function Sentences(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Sentences);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Sentences).call(this, document, pointer, groups));\n      _this.viewType = 'Sentences';\n      return _this;\n    }\n\n    _createClass(Sentences, [{\n      key: \"json\",\n      value: function json() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.map(function (m) {\n          var json = m.toView().json(opts)[0] || {};\n\n          var _parse = parse(m),\n              subj = _parse.subj,\n              verb = _parse.verb,\n              pred = _parse.pred;\n\n          json.sentence = {\n            subject: subj.text('normal'),\n            verb: verb.text('normal'),\n            predicate: pred.text('normal')\n          };\n          return json;\n        }, []);\n      }\n    }, {\n      key: \"toPastTense\",\n      value: function toPastTense(n) {\n        return getNth(this, n).map(function (s) {\n          var parsed = parse(s);\n          return toPast(s, parsed);\n        });\n      }\n    }, {\n      key: \"toPresentTense\",\n      value: function toPresentTense(n) {\n        return getNth(this, n).map(function (s) {\n          var parsed = parse(s);\n          return toPresent(s, parsed);\n        });\n      }\n    }, {\n      key: \"toFutureTense\",\n      value: function toFutureTense(n) {\n        return getNth(this, n).map(function (s) {\n          var parsed = parse(s);\n          s = toFuture(s, parsed);\n          return s;\n        });\n      }\n    }, {\n      key: \"toInfinitive\",\n      value: function toInfinitive(n) {\n        return getNth(this, n).map(function (s) {\n          var parsed = parse(s);\n          return _toInfinitive(s, parsed);\n        });\n      }\n    }, {\n      key: \"toNegative\",\n      value: function toNegative(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parse(vb);\n          return _toNegative(vb, parsed);\n        });\n      }\n    }, {\n      key: \"toPositive\",\n      value: function toPositive(n) {\n        return getNth(this, n).map(function (vb) {\n          var parsed = parse(vb);\n          return _toPositive(vb, parsed);\n        });\n      }\n    }, {\n      key: \"isQuestion\",\n      value: function isQuestion(n) {\n        return this.questions(n);\n      }\n    }, {\n      key: \"isExclamation\",\n      value: function isExclamation(n) {\n        var res = this.filter(function (s) {\n          return s.lastTerm().has('@hasExclamation');\n        });\n        return getNth(res, n);\n      }\n    }, {\n      key: \"isStatement\",\n      value: function isStatement(n) {\n        var res = this.filter(function (s) {\n          return !s.isExclamation().found && !s.isQuestion().found;\n        });\n        return getNth(res, n);\n      } // overloaded - keep Sentences class\n\n    }, {\n      key: \"update\",\n      value: function update(pointer) {\n        var m = new Sentences(this.document, pointer);\n        m._cache = this._cache; // share this full thing\n\n        return m;\n      }\n    }]);\n\n    return Sentences;\n  }(View); // aliases\n\n\n  Sentences.prototype.toPresent = Sentences.prototype.toPresentTense;\n  Sentences.prototype.toPast = Sentences.prototype.toPastTense;\n  Sentences.prototype.toFuture = Sentences.prototype.toFutureTense;\n  var methods = {\n    sentences: function sentences(n) {\n      var m = this.map(function (s) {\n        return s.fullSentence();\n      });\n      m = getNth(m, n);\n      return new Sentences(this.document, m.pointer);\n    },\n    questions: function questions(n) {\n      var m = isQuestion(this);\n      return getNth(m, n);\n    }\n  };\n  Object.assign(View.prototype, methods);\n};\n\nexport default api;","map":null,"metadata":{},"sourceType":"module"}