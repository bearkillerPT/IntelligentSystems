{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport find from './find.js';\nimport _parse from './parse.js';\nimport _toCardinal from './convert/toCardinal.js';\nimport _toOrdinal from './convert/toOrdinal.js'; // return the nth elem of a doc\n\nexport var getNth = function getNth(doc, n) {\n  return typeof n === 'number' ? doc.eq(n) : doc;\n};\n\nvar plugin = function plugin(View) {\n  /**\n   */\n  var Fractions = /*#__PURE__*/function (_View) {\n    _inherits(Fractions, _View);\n\n    function Fractions(document, pointer, groups) {\n      var _this;\n\n      _classCallCheck(this, Fractions);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Fractions).call(this, document, pointer, groups));\n      _this.viewType = 'Fractions';\n      return _this;\n    }\n\n    _createClass(Fractions, [{\n      key: \"parse\",\n      value: function parse(n) {\n        return getNth(this, n).map(_parse);\n      }\n    }, {\n      key: \"get\",\n      value: function get(n) {\n        return getNth(this, n).map(_parse);\n      }\n    }, {\n      key: \"json\",\n      value: function json(n) {\n        return getNth(this, n).map(function (p) {\n          var json = p.toView().json(n)[0];\n\n          var parsed = _parse(p);\n\n          json.fraction = parsed;\n          return json;\n        }, []);\n      } // become 0.5\n\n    }, {\n      key: \"toDecimal\",\n      value: function toDecimal(n) {\n        getNth(this, n).forEach(function (m) {\n          var _parse2 = _parse(m),\n              decimal = _parse2.decimal;\n\n          m = m.replaceWith(String(decimal), true);\n          m.tag('NumericValue');\n          m.unTag('Fraction');\n        });\n        return this;\n      }\n    }, {\n      key: \"toFraction\",\n      value: function toFraction(n) {\n        var _this2 = this;\n\n        getNth(this, n).forEach(function (m) {\n          var obj = _parse(m);\n\n          if (obj && typeof obj.numerator === 'number' && typeof obj.denominator === 'number') {\n            var str = \"\".concat(obj.numerator, \"/\").concat(obj.denominator);\n\n            _this2.replace(m, str);\n          }\n        });\n        return this;\n      }\n    }, {\n      key: \"toOrdinal\",\n      value: function toOrdinal(n) {\n        getNth(this, n).forEach(function (m) {\n          var obj = _parse(m);\n\n          var str = _toOrdinal(obj);\n\n          if (m.after('^#Noun').found) {\n            str += ' of'; // three fifths of dentists\n          }\n\n          m.replaceWith(str);\n        });\n        return this;\n      }\n    }, {\n      key: \"toCardinal\",\n      value: function toCardinal(n) {\n        getNth(this, n).forEach(function (m) {\n          var obj = _parse(m);\n\n          var str = _toCardinal(obj);\n\n          m.replaceWith(str);\n        });\n        return this;\n      }\n    }, {\n      key: \"toPercentage\",\n      value: function toPercentage(n) {\n        getNth(this, n).forEach(function (m) {\n          var _parse3 = _parse(m),\n              decimal = _parse3.decimal;\n\n          var percent = decimal * 100;\n          percent = Math.round(percent * 100) / 100; // round it\n\n          m.replaceWith(\"\".concat(percent, \"%\"));\n        });\n        return this;\n      }\n    }]);\n\n    return Fractions;\n  }(View);\n\n  View.prototype.fractions = function (n) {\n    var m = find(this);\n    m = getNth(m, n);\n    return new Fractions(this.document, m.pointer);\n  };\n};\n\nexport default plugin;","map":null,"metadata":{},"sourceType":"module"}