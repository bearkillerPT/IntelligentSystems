{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\n// finally,\n// actually run these match-statements on the terms\nvar runMatch = function runMatch(maybeList, document, methods, opts) {\n  var results = [];\n\n  var _loop = function _loop(n) {\n    var _loop2 = function _loop2(i) {\n      var m = maybeList[n][i]; // ok, actually do the work.\n\n      var res = methods.one.match([document[n]], m); // found something.\n\n      if (res.ptrs.length > 0) {\n        // let index=document[n][0].index\n        res.ptrs.forEach(function (ptr) {\n          ptr[0] = n; // fix the sentence pointer\n\n          var todo = Object.assign({}, m, {\n            pointer: ptr\n          });\n\n          if (m.unTag !== undefined) {\n            todo.unTag = m.unTag;\n          }\n\n          results.push(todo);\n        }); //ok cool, can we stop early?\n\n        if (opts.matchOne === true) {\n          return {\n            v: {\n              v: [results[0]]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < maybeList[n].length; i += 1) {\n      var _ret2 = _loop2(i);\n\n      if (_typeof(_ret2) === \"object\") return _ret2.v;\n    }\n  };\n\n  for (var n = 0; n < maybeList.length; n += 1) {\n    var _ret = _loop(n);\n\n    if (_typeof(_ret) === \"object\") return _ret.v;\n  }\n\n  return results;\n};\n\nexport default runMatch;","map":null,"metadata":{},"sourceType":"module"}