{"ast":null,"code":"var hasHyphen = function hasHyphen(str, model) {\n  var parts = str.split(/[-–—]/);\n\n  if (parts.length <= 1) {\n    return false;\n  }\n\n  var _model$one = model.one,\n      prefixes = _model$one.prefixes,\n      suffixes = _model$one.suffixes; //dont split 're-do'\n\n  if (prefixes.hasOwnProperty(parts[0])) {\n    return false;\n  } //dont split 'flower-like'\n\n\n  parts[1] = parts[1].trim().replace(/[.?!]$/, '');\n\n  if (suffixes.hasOwnProperty(parts[1])) {\n    return false;\n  } //letter-number 'aug-20'\n\n\n  var reg = /^([a-z\\u00C0-\\u00FF`\"'/]+)[-–—]([a-z0-9\\u00C0-\\u00FF].*)/i;\n\n  if (reg.test(str) === true) {\n    return true;\n  } //number-letter '20-aug'\n\n\n  var reg2 = /^([0-9]{1,4})[-–—]([a-z\\u00C0-\\u00FF`\"'/-]+$)/i;\n\n  if (reg2.test(str) === true) {\n    return true;\n  }\n\n  return false;\n};\n\nvar splitHyphens = function splitHyphens(word) {\n  var arr = []; //support multiple-hyphenated-terms\n\n  var hyphens = word.split(/[-–—]/);\n  var whichDash = '-';\n  var found = word.match(/[-–—]/);\n\n  if (found && found[0]) {\n    whichDash = found;\n  }\n\n  for (var o = 0; o < hyphens.length; o++) {\n    if (o === hyphens.length - 1) {\n      arr.push(hyphens[o]);\n    } else {\n      arr.push(hyphens[o] + whichDash);\n    }\n  }\n\n  return arr;\n};\n\nexport { splitHyphens, hasHyphen };","map":null,"metadata":{},"sourceType":"module"}