{"ast":null,"code":"export var relPointer = function relPointer(ptrs, parent) {\n  if (!parent) {\n    return ptrs;\n  }\n\n  ptrs.forEach(function (ptr) {\n    var n = ptr[0];\n\n    if (parent[n]) {\n      ptr[0] = parent[n][0]; //n\n\n      ptr[1] += parent[n][1]; //start\n\n      ptr[2] += parent[n][1]; //end\n    }\n  });\n  return ptrs;\n}; // make match-result relative to whole document\n\nexport var fixPointers = function fixPointers(res, parent) {\n  var ptrs = res.ptrs,\n      byGroup = res.byGroup;\n  ptrs = relPointer(ptrs, parent);\n  Object.keys(byGroup).forEach(function (k) {\n    byGroup[k] = relPointer(byGroup[k], parent);\n  });\n  return {\n    ptrs: ptrs,\n    byGroup: byGroup\n  };\n};\n\nvar isObject = function isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}; // did they pass-in a compromise object?\n\n\nexport var isView = function isView(val) {\n  return val && isObject(val) && val.isView === true;\n};\nexport var isNet = function isNet(val) {\n  return val && isObject(val) && val.isNet === true;\n}; // is the pointer the full sentence?\n// export const isFull = function (ptr, document) {\n//   let [n, start, end] = ptr\n//   if (start !== 0) {\n//     return false\n//   }\n//   if (document[n] && document[n][end - 1] && !document[n][end]) {\n//     return true\n//   }\n//   return false\n// }","map":null,"metadata":{},"sourceType":"module"}